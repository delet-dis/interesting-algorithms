{"version":3,"file":"js/959-legacy.60c7202c.js","mappings":"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","sources":["webpack://interesting-algorithms/./node_modules/core-js/modules/es.string.match-all.js","webpack://interesting-algorithms/./src/data/enums/AntCellType.ts","webpack://interesting-algorithms/./src/data/enums/CellDisplayType.ts","webpack://interesting-algorithms/./src/data/enums/LabyrinthCellType.ts","webpack://interesting-algorithms/./src/data/models/Point.ts","webpack://interesting-algorithms/./src/data/models/cell/Cell.ts","webpack://interesting-algorithms/./src/ui/components/labyrinth/Labyrinth.vue?9701","webpack://interesting-algorithms/./src/ui/components/labyrinth/Labyrinth.vue?ca91","webpack://interesting-algorithms/./src/ui/components/labyrinth/Labyrinth.vue"],"sourcesContent":["'use strict';\n/* eslint-disable es/no-string-prototype-matchall -- safe */\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar toLength = require('../internals/to-length');\nvar toString = require('../internals/to-string');\nvar anObject = require('../internals/an-object');\nvar classof = require('../internals/classof-raw');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar isRegExp = require('../internals/is-regexp');\nvar regExpFlags = require('../internals/regexp-flags');\nvar getMethod = require('../internals/get-method');\nvar redefine = require('../internals/redefine');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\nvar InternalStateModule = require('../internals/internal-state');\nvar IS_PURE = require('../internals/is-pure');\n\nvar MATCH_ALL = wellKnownSymbol('matchAll');\nvar REGEXP_STRING = 'RegExp String';\nvar REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);\nvar RegExpPrototype = RegExp.prototype;\nvar TypeError = global.TypeError;\nvar getFlags = uncurryThis(regExpFlags);\nvar stringIndexOf = uncurryThis(''.indexOf);\nvar un$MatchAll = uncurryThis(''.matchAll);\n\nvar WORKS_WITH_NON_GLOBAL_REGEX = !!un$MatchAll && !fails(function () {\n  un$MatchAll('a', /./);\n});\n\nvar $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, $global, fullUnicode) {\n  setInternalState(this, {\n    type: REGEXP_STRING_ITERATOR,\n    regexp: regexp,\n    string: string,\n    global: $global,\n    unicode: fullUnicode,\n    done: false\n  });\n}, REGEXP_STRING, function next() {\n  var state = getInternalState(this);\n  if (state.done) return { value: undefined, done: true };\n  var R = state.regexp;\n  var S = state.string;\n  var match = regExpExec(R, S);\n  if (match === null) return { value: undefined, done: state.done = true };\n  if (state.global) {\n    if (toString(match[0]) === '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);\n    return { value: match, done: false };\n  }\n  state.done = true;\n  return { value: match, done: false };\n});\n\nvar $matchAll = function (string) {\n  var R = anObject(this);\n  var S = toString(string);\n  var C, flagsValue, flags, matcher, $global, fullUnicode;\n  C = speciesConstructor(R, RegExp);\n  flagsValue = R.flags;\n  if (flagsValue === undefined && isPrototypeOf(RegExpPrototype, R) && !('flags' in RegExpPrototype)) {\n    flagsValue = getFlags(R);\n  }\n  flags = flagsValue === undefined ? '' : toString(flagsValue);\n  matcher = new C(C === RegExp ? R.source : R, flags);\n  $global = !!~stringIndexOf(flags, 'g');\n  fullUnicode = !!~stringIndexOf(flags, 'u');\n  matcher.lastIndex = toLength(R.lastIndex);\n  return new $RegExpStringIterator(matcher, S, $global, fullUnicode);\n};\n\n// `String.prototype.matchAll` method\n// https://tc39.es/ecma262/#sec-string.prototype.matchall\n$({ target: 'String', proto: true, forced: WORKS_WITH_NON_GLOBAL_REGEX }, {\n  matchAll: function matchAll(regexp) {\n    var O = requireObjectCoercible(this);\n    var flags, S, matcher, rx;\n    if (regexp != null) {\n      if (isRegExp(regexp)) {\n        flags = toString(requireObjectCoercible('flags' in RegExpPrototype\n          ? regexp.flags\n          : getFlags(regexp)\n        ));\n        if (!~stringIndexOf(flags, 'g')) throw TypeError('`.matchAll` does not allow non-global regexes');\n      }\n      if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);\n      matcher = getMethod(regexp, MATCH_ALL);\n      if (matcher === undefined && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;\n      if (matcher) return call(matcher, regexp, O);\n    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);\n    S = toString(O);\n    rx = new RegExp(regexp, 'g');\n    return IS_PURE ? call($matchAll, rx, S) : rx[MATCH_ALL](S);\n  }\n});\n\nIS_PURE || MATCH_ALL in RegExpPrototype || redefine(RegExpPrototype, MATCH_ALL, $matchAll);\n","enum AntCellType {\n    CENTER_CELL,\n    PATH_CELL,\n    FOOD_CELL,\n    BORDER_CELL,\n    EMPTY_CELL\n}\n\nexport default AntCellType\n","enum CellDisplayType {\n    STARTABLE_CELL = \"table-cell-startable\",\n    FINISHABLE_CELL = \"table-cell-finishable\",\n    BORDERABLE_CELL = \"table-cell-borderable\",\n    CELL = \"table-cell\",\n    START_CELL = \"table-cell-start\",\n    FINISH_CELL = \"table-cell-finish\",\n    BORDER_CELL = \"table-cell-border\",\n    WRONG_PATH_CELL = \"table-cell-wrong-path\",\n    CORRECT_PATH_CELL = \"table-cell-correct-path\",\n    FOOD_CELL = \"table-cell-food\"\n}\n\nexport default CellDisplayType\n","enum LabyrinthCellType {\n    BORDER_CELL,\n    EMPTY_CELL,\n    CAN_BECOME_EMPTY,\n    START_CELL,\n    FINISH_CELL,\n    PATH_CELL,\n}\n\nexport default LabyrinthCellType\n","class Point {\n    constructor(public x: number, public y: number) {\n    }\n}\n\nexport default Point\n","import Point from \"@/data/models/Point\";\nimport LabyrinthCellType from \"@/data/enums/LabyrinthCellType\";\nimport AntCellType from \"@/data/enums/AntCellType\";\n\nclass Cell {\n    constructor(public point: Point, public type: LabyrinthCellType | AntCellType) {\n    }\n}\n\nexport default Cell\n","import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-50b1272d\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"table cardCenterChild\" }\nconst _hoisted_2 = [\"id\"]\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createElementBlock(\"table\", _hoisted_1, [\n    _createElementVNode(\"tbody\", null, [\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.getLabyrinthSizing, (firstIterator) => {\n        return (_openBlock(), _createElementBlock(\"tr\", { key: firstIterator }, [\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.getLabyrinthSizing, (secondIterator) => {\n            return (_openBlock(), _createElementBlock(\"td\", {\n              key: secondIterator,\n              id: `table-cell-` + (secondIterator-1) + `x` + (firstIterator-1),\n              class: \"table-cell\"\n            }, \"   \", 8, _hoisted_2))\n          }), 128))\n        ]))\n      }), 128))\n    ])\n  ]))\n}","\nimport {Options, prop, Vue} from 'vue-class-component';\nimport Card from \"@/ui/components/card/Card.vue\";\nimport SidebarLinkEntity from \"@/data/models/SidebarLinkEntity\";\nimport CellDisplayType from \"@/data/enums/CellDisplayType\";\nimport LabyrinthCellType from \"@/data/enums/LabyrinthCellType\";\nimport Point from \"@/data/models/Point\";\nimport Cell from \"@/data/models/cell/Cell\";\nimport AntCellType from \"@/data/enums/AntCellType\";\n\nclass Props {\n    labyrinthSizing: SidebarLinkEntity = prop({\n        required: true,\n    })\n}\n\n@Options({\n    components: {Card},\n})\nexport default class Labyrinth extends Vue.with(Props) {\n    cells = document.getElementsByClassName(CellDisplayType.CELL)\n\n    foodNutritionalValue = 0\n\n    private updateCellsCollection() {\n        this.cells = document.getElementsByClassName(CellDisplayType.CELL)\n    }\n\n    public get getCells() {\n        this.updateCellsCollection()\n        return this.cells\n    }\n\n    private startPickingListener = (event: Event) => {\n        let cell = (event.target as Element)\n\n        this.clearCells()\n        cell.classList.remove(CellDisplayType.FINISH_CELL)\n        cell.classList.remove(CellDisplayType.BORDER_CELL)\n        cell.classList.add(CellDisplayType.START_CELL)\n\n        this.removeStartListener()\n    }\n\n    private finishPickingListener = (event: Event) => {\n        let cell = (event.target as Element)\n\n        this.clearCells()\n        cell.classList.remove(CellDisplayType.START_CELL)\n        cell.classList.remove(CellDisplayType.BORDER_CELL)\n        cell.classList.add(CellDisplayType.FINISH_CELL)\n\n        this.removeFinishListener()\n    }\n\n    private foodPickingListener = (event: Event) => {\n        let cell = (event.target as Element)\n\n        cell.classList.remove(CellDisplayType.START_CELL)\n        cell.classList.remove(CellDisplayType.BORDER_CELL)\n        cell.classList.add(CellDisplayType.FINISH_CELL)\n\n        cell.setAttribute('data-nutritionalValue', this.foodNutritionalValue.toString())\n    }\n\n    private borderPickingListener = (event: Event) => {\n        let cell = (event.target as Element)\n\n        cell.classList.remove(CellDisplayType.START_CELL)\n        cell.classList.remove(CellDisplayType.FINISH_CELL)\n        cell.classList.add(CellDisplayType.BORDER_CELL)\n    }\n\n    private get getLabyrinthSizing() {\n        return this.labyrinthSizing\n    }\n\n    displayBorderCells<T extends Cell>(cells: T[][]) {\n        this.removeBorderListener()\n\n        this.resetCellsClasses()\n\n        cells.forEach((subArray) => {\n                subArray.forEach((cell) => {\n                    let documentCell = document.getElementById(CellDisplayType.CELL + `-` + cell.point.x + `x` + cell.point.y)\n\n                    if (cell.type === LabyrinthCellType.BORDER_CELL || cell.type === AntCellType.BORDER_CELL) {\n                        documentCell?.setAttribute(\"class\", CellDisplayType.CELL + \" \" + CellDisplayType.BORDER_CELL)\n                    }\n                })\n            }\n        )\n    }\n\n    getCellCoordinates(cell: Element): Point {\n        let regex = new RegExp(\"(\\\\d*)x(\\\\d*)\", \"g\")\n\n        let matches = [...cell.id.matchAll(regex)]\n\n        return new Point(Number(matches[0][1]), Number(matches[0][2]))\n    }\n\n    private static updateCardSize(card: HTMLElement | null) {\n        if (card) {\n            card.style.height = card.clientWidth + `px`\n        }\n    }\n\n    private static initCardWidthListener() {\n        let card = document.getElementById(\"labyrinthCard\")\n\n        Labyrinth.updateCardSize(card)\n\n        card?.addEventListener('resize', () => {\n            Labyrinth.updateCardSize(card)\n        })\n    }\n\n    makeCellsSelectableForStart() {\n        Array.from(this.cells).forEach((cell) => {\n            cell.classList.add(CellDisplayType.STARTABLE_CELL)\n            cell.classList.remove(CellDisplayType.START_CELL)\n            cell.classList.remove(CellDisplayType.BORDERABLE_CELL)\n            cell.classList.remove(CellDisplayType.FINISHABLE_CELL)\n\n            cell.addEventListener('click', this.startPickingListener)\n        })\n    }\n\n    makeCellsSelectableForFinish() {\n        Array.from(this.cells).forEach((cell) => {\n            cell.classList.add(CellDisplayType.FINISHABLE_CELL)\n            cell.classList.remove(CellDisplayType.FINISH_CELL)\n            cell.classList.remove(CellDisplayType.BORDERABLE_CELL)\n\n            cell.addEventListener('click', this.finishPickingListener)\n        })\n    }\n\n    makeCellsSelectableForFood() {\n        Array.from(this.cells).forEach((cell) => {\n            cell.classList.add(CellDisplayType.FINISHABLE_CELL)\n            cell.classList.remove(CellDisplayType.BORDERABLE_CELL)\n\n            cell.addEventListener('click', this.foodPickingListener)\n        })\n    }\n\n    makeCellsSelectableForBorders() {\n        Array.from(this.cells).forEach((cell) => {\n            cell.classList.add(CellDisplayType.BORDERABLE_CELL)\n\n            cell.addEventListener('click', this.borderPickingListener)\n        })\n    }\n\n    clearPreviousResult() {\n        Array.from(this.cells).forEach((cell) => {\n            cell.classList.remove(CellDisplayType.WRONG_PATH_CELL)\n            cell.classList.remove(CellDisplayType.CORRECT_PATH_CELL)\n        })\n    }\n\n    resetCellsClasses() {\n        Array.from(this.cells).forEach((cell) => {\n            cell.setAttribute(\"class\", CellDisplayType.CELL)\n\n            cell.removeAttribute(\"data-nutritionalValue\")\n        })\n    }\n\n    clearCells() {\n        Array.from(this.cells).forEach((cell) => {\n            Labyrinth.clearCell(cell)\n        })\n    }\n\n    private static clearCell(cell: Element) {\n        cell.classList.remove(CellDisplayType.STARTABLE_CELL)\n        cell.classList.remove(CellDisplayType.FINISHABLE_CELL)\n        cell.classList.remove(CellDisplayType.BORDERABLE_CELL)\n\n        cell.classList.remove(CellDisplayType.CORRECT_PATH_CELL)\n        cell.classList.remove(CellDisplayType.WRONG_PATH_CELL)\n    }\n\n    removeStartListener() {\n        Array.from(this.cells).forEach((cell) => {\n            cell.removeEventListener('click', this.startPickingListener)\n        })\n    }\n\n    removeFinishListener() {\n        Array.from(this.cells).forEach((cell) => {\n            cell.removeEventListener('click', this.finishPickingListener)\n        })\n    }\n\n    removeFoodListener() {\n        Array.from(this.cells).forEach((cell) => {\n            cell.removeEventListener('click', this.foodPickingListener)\n        })\n    }\n\n    removeBorderListener() {\n        Array.from(this.cells).forEach((cell) => {\n            cell.removeEventListener('click', this.borderPickingListener)\n        })\n    }\n\n    mounted() {\n        Labyrinth.initCardWidthListener()\n        this.updateCellsCollection()\n    }\n}\n","import { render } from \"./Labyrinth.vue?vue&type=template&id=50b1272d&scoped=true&ts=true\"\nimport script from \"./Labyrinth.vue?vue&type=script&lang=ts\"\nexport * from \"./Labyrinth.vue?vue&type=script&lang=ts\"\n\nimport \"./Labyrinth.vue?vue&type=style&index=0&id=50b1272d&scoped=true&lang=css\"\n\nimport exportComponent from \"/Users/delet-dis/Documents/projects/Frontend/interesting-algorithms/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-50b1272d\"]])\n\nexport default __exports__"],"names":["$","global","call","uncurryThis","createIteratorConstructor","requireObjectCoercible","toLength","toString","anObject","classof","isPrototypeOf","isRegExp","regExpFlags","getMethod","redefine","fails","wellKnownSymbol","speciesConstructor","advanceStringIndex","regExpExec","InternalStateModule","IS_PURE","MATCH_ALL","REGEXP_STRING","REGEXP_STRING_ITERATOR","setInternalState","set","getInternalState","getterFor","RegExpPrototype","RegExp","prototype","TypeError","getFlags","stringIndexOf","indexOf","un$MatchAll","matchAll","WORKS_WITH_NON_GLOBAL_REGEX","$RegExpStringIterator","regexp","string","$global","fullUnicode","this","type","unicode","done","state","value","undefined","R","S","match","lastIndex","$matchAll","C","flagsValue","flags","matcher","source","target","proto","forced","rx","O","AntCellType","CellDisplayType","LabyrinthCellType","Point","x","y","Cell","point","_hoisted_1","class","_hoisted_2","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createElementBlock","_createElementVNode","_Fragment","_renderList","getLabyrinthSizing","firstIterator","key","secondIterator","id","Props","prop","required","Labyrinth","document","getElementsByClassName","event","cell","clearCells","classList","remove","add","removeStartListener","removeFinishListener","setAttribute","foodNutritionalValue","cells","updateCellsCollection","labyrinthSizing","removeBorderListener","resetCellsClasses","forEach","subArray","documentCell","getElementById","regex","matches","Number","Array","from","addEventListener","startPickingListener","finishPickingListener","foodPickingListener","borderPickingListener","removeAttribute","Labyrinth_1","clearCell","removeEventListener","initCardWidthListener","card","style","height","clientWidth","updateCardSize","Vue","Options","components","Card","__exports__"],"sourceRoot":""}