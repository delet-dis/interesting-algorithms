{"version":3,"file":"js/622.f78705f3.js","mappings":"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","sources":["webpack://interesting-algorithms/./src/ui/views/clusteringView/ClusteringView.vue?af34","webpack://interesting-algorithms/./src/ui/views/clusteringView/components/ClusteringDescription.vue?bc67","webpack://interesting-algorithms/./src/ui/views/clusteringView/components/ClusteringDescription.vue?cd0c","webpack://interesting-algorithms/./src/ui/views/clusteringView/components/ClusteringDescription.vue","webpack://interesting-algorithms/./src/data/models/clustering/Dot.ts","webpack://interesting-algorithms/./src/data/classes/clustering/Cluster.ts","webpack://interesting-algorithms/./src/data/repositories/clustering/KMeansClusteringRepository.ts","webpack://interesting-algorithms/./src/ui/views/clusteringView/enums/ClusteringDisplayState.ts","webpack://interesting-algorithms/./src/data/models/clustering/DoubleLinkedList.ts","webpack://interesting-algorithms/./src/data/models/clustering/Cluster.ts","webpack://interesting-algorithms/./src/data/repositories/clustering/HierarchyClusteringRepository.ts","webpack://interesting-algorithms/./src/ui/views/clusteringView/ClusteringView.vue?111f","webpack://interesting-algorithms/./src/ui/views/clusteringView/ClusteringView.vue"],"sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-37793bbf\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = {\n  class: \"container\",\n  id: \"container\"\n}\nconst _hoisted_2 = { class: \"row\" }\nconst _hoisted_3 = { class: \"col-lg-3 col-md-12\" }\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \" Я знаю точно – невозможное возможно \", -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" Количество точек меньше количества кластеров \", -1))\nconst _hoisted_6 = { class: \"col-lg-6 col-md-12\" }\nconst _hoisted_7 = {\n  class: \"clusterCanvas\",\n  id: \"clusterCanvas\",\n  ref: \"clusterCanvas\"\n}\nconst _hoisted_8 = { class: \"col-lg-3 col-md-12\" }\nconst _hoisted_9 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \" Конфигуратор алгоритма \", -1))\nconst _hoisted_10 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" Количество кластеров \", -1))\nconst _hoisted_11 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"separator\" }, null, -1))\nconst _hoisted_12 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" Действия с точками \", -1))\nconst _hoisted_13 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-action\",\n  id: \"addDotButton\"\n}, \" Добавить точки \", -1))\nconst _hoisted_14 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"spacer\" }, null, -1))\nconst _hoisted_15 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-caution\",\n  id: \"removeDotButton\"\n}, \" Удалить точки \", -1))\nconst _hoisted_16 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"separator\" }, null, -1))\nconst _hoisted_17 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" Тип кластеризации \", -1))\nconst _hoisted_18 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-royal\",\n  id: \"kMeansButton\"\n}, \" К-Средних \", -1))\nconst _hoisted_19 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"spacer\" }, null, -1))\nconst _hoisted_20 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-royal\",\n  id: \"hierarchyButton\"\n}, \" Иерархический \", -1))\nconst _hoisted_21 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"spacer\" }, null, -1))\nconst _hoisted_22 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-primary button-glow\",\n  id: \"comparisonButton\"\n}, \" Сравнение алгоритмов \", -1))\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ClusteringDescription = _resolveComponent(\"ClusteringDescription\")!\n  const _component_Card = _resolveComponent(\"Card\")!\n  const _component_Error = _resolveComponent(\"Error\")!\n  const _component_vue_slider = _resolveComponent(\"vue-slider\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createElementVNode(\"div\", _hoisted_3, [\n        _createVNode(_component_Card, { class: \"descriptionCard\" }, {\n          default: _withCtx(() => [\n            _createVNode(_component_ClusteringDescription)\n          ]),\n          _: 1\n        }),\n        _createVNode(_component_Error, {\n          id: \"error\",\n          class: _normalizeClass({'error-displaying':_ctx.isErrorDisplaying})\n        }, {\n          default: _withCtx(() => [\n            _hoisted_4,\n            _hoisted_5\n          ]),\n          _: 1\n        }, 8, [\"class\"])\n      ]),\n      _createElementVNode(\"div\", _hoisted_6, [\n        _createVNode(_component_Card, {\n          class: \"cardCenter clusteringCard\",\n          id: \"clusteringCard\"\n        }, {\n          default: _withCtx(() => [\n            _createElementVNode(\"canvas\", _hoisted_7, null, 512)\n          ]),\n          _: 1\n        })\n      ]),\n      _createElementVNode(\"div\", _hoisted_8, [\n        _createVNode(_component_Card, null, {\n          default: _withCtx(() => [\n            _hoisted_9,\n            _hoisted_10,\n            _createVNode(_component_vue_slider, {\n              modelValue: _ctx.numberOfClusters,\n              \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.numberOfClusters) = $event)),\n              dotSize: 20,\n              max: 10,\n              min: 2,\n              silent: true\n            }, null, 8, [\"modelValue\"]),\n            _hoisted_11,\n            _hoisted_12,\n            _hoisted_13,\n            _hoisted_14,\n            _hoisted_15,\n            _hoisted_16,\n            _hoisted_17,\n            _hoisted_18,\n            _hoisted_19,\n            _hoisted_20,\n            _hoisted_21,\n            _hoisted_22\n          ]),\n          _: 1\n        })\n      ])\n    ])\n  ]))\n}","import { createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \" Алгоритм кластеризации \", -1)\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", null, \" Бонусная реализация \", -1)\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"p\", null, \" Алгоритм для разбиения точек на кластеры \", -1)\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _hoisted_1,\n    _hoisted_2,\n    _hoisted_3\n  ], 64))\n}","\nimport {Options, Vue} from 'vue-class-component';\n\n\n@Options({\n    components: {\n    },\n})\nexport default class ClusteringDescription extends Vue {\n}\n","import { render } from \"./ClusteringDescription.vue?vue&type=template&id=7fdc5f04&ts=true\"\nimport script from \"./ClusteringDescription.vue?vue&type=script&lang=ts\"\nexport * from \"./ClusteringDescription.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/Users/delet-dis/Documents/projects/Frontend/interesting-algorithms/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","class Dot {\n    constructor(public xCoordinate: number, public yCoordinate: number, public kMeansIndex: number | null = null, public hierarchyIndex: number | null = null) {\n    }\n}\n\nexport default Dot\n","import Dot from \"@/data/models/clustering/Dot\";\n\nclass Cluster {\n    currentX = -1\n    currentY = -1\n    dots: Dot[] = []\n    lastX = -1\n    lastY = -1\n\n    setCenter() {\n        let sumX = 0\n        let sumY = 0\n\n        this.dots.forEach((dot) => {\n            sumX += dot.xCoordinate\n            sumY += dot.yCoordinate\n        })\n\n        this.lastX = this.currentX\n        this.lastY = this.currentY\n\n        this.currentX = sumX / this.dots.length\n        this.currentY = sumY / this.dots.length\n    }\n}\n\nexport default Cluster\n","import ClusteringInterface from \"@/data/interfaces/clustering/ClusteringInterface\";\nimport Dot from \"@/data/models/clustering/Dot\";\nimport Cluster from \"@/data/classes/clustering/Cluster\";\n\nclass KMeansClusteringRepository implements ClusteringInterface {\n    private static instance: KMeansClusteringRepository\n\n    public static getInstance(): KMeansClusteringRepository {\n        if (!KMeansClusteringRepository.instance) {\n            KMeansClusteringRepository.instance = new KMeansClusteringRepository()\n        }\n\n        return KMeansClusteringRepository.instance\n    }\n\n    private clusters: Cluster[] = []\n\n    private identifyCenters(k: number, allDots: Dot[]): void {\n        const size = allDots.length\n        const step = size / k\n\n        let iterator = 0\n\n        for (let j = 0; j < k; j++, iterator += step) {\n            this.clusters[j].currentX = allDots[Math.floor(iterator)].xCoordinate\n            this.clusters[j].currentY = allDots[Math.floor(iterator)].yCoordinate\n        }\n    }\n\n    private bind(allDots: Dot[], clustersNumber: number): Dot[] {\n        for (let i = 0; i < clustersNumber; i++) {\n            this.clusters[i].dots = []\n        }\n\n        for (let i = 0; i < allDots.length; i++) {\n            let minimalDistance = Number.MAX_VALUE\n            let arrayPos = -1\n\n            for (let j = 0; j < this.clusters.length; j++) {\n                const currentDistance = Math.sqrt(Math.pow(allDots[i].xCoordinate - this.clusters[j].currentX, 2) +\n                    Math.pow(allDots[i].yCoordinate - this.clusters[j].currentY, 2))\n\n                if (currentDistance < minimalDistance) {\n                    minimalDistance = currentDistance\n                    allDots[i].kMeansIndex = j\n                    arrayPos = j\n                }\n            }\n            this.clusters[arrayPos].dots.push(allDots[i])\n\n        }\n        return allDots\n    }\n\n    splitByClusters(dots: Dot[], numberOfClusters: number): Dot[] {\n        this.clusters = []\n\n        for (let i = 0; i < numberOfClusters; i++) {\n            this.clusters[i] = new Cluster()\n        }\n\n        this.identifyCenters(numberOfClusters, dots)\n\n        let numberOfClustersToCheck = 0\n\n        while (numberOfClustersToCheck != numberOfClusters) {\n            numberOfClustersToCheck = 0\n\n            dots = this.bind(dots, numberOfClusters)\n\n            for (let j = 0; j < this.clusters.length; j++) {\n                this.clusters[j].setCenter()\n            }\n            for (let p = 0; p < numberOfClusters; p++) {\n                if (this.clusters[p].currentX == this.clusters[p].lastX && this.clusters[p].currentY == this.clusters[p].lastY)\n                    numberOfClustersToCheck++\n            }\n        }\n        return dots\n    }\n}\n\nexport default KMeansClusteringRepository\n","enum ClusteringDisplayState {\n    DOTS_ADDING,\n    DOTS_REMOVING\n}\n\nexport default ClusteringDisplayState\n","export class ListNode<T> {\n    constructor(public data: T, public prevNode: ListNode<T> | null, public nextNode: ListNode<T> | null) {\n    }\n}\n\nclass LinkedList<T> implements Iterable <ListNode<T>> {\n    private frontNode: ListNode<T> | null = null\n    private backNode: ListNode<T> | null = null\n    public iteratorStartNode: ListNode<T> | null = null\n    public size = 0\n\n    constructor(...args: T[]) {\n        for (const i of args)\n            this.pushBack(i)\n    }\n\n    public pushBack(element: T): void {\n        if (this.backNode === null) {\n            this.backNode = new ListNode<T>(element, null, null)\n            this.frontNode = this.backNode\n\n            this.iteratorStartNode = this.frontNode\n        } else {\n            this.backNode.nextNode = new ListNode<T>(element, this.backNode, null)\n            this.backNode = this.backNode.nextNode\n        }\n\n        this.size++\n    }\n\n    public remove(node: ListNode<T>): void {\n        let notRemoved = true\n\n        if (node === this.backNode) {\n            if (node.prevNode)\n                node.prevNode!.nextNode = null\n            this.backNode = node.prevNode\n            notRemoved = false\n        }\n\n        if (node === this.frontNode) {\n            if (node.nextNode)\n                node.nextNode!.prevNode = null\n            this.frontNode = node.nextNode\n            this.iteratorStartNode = this.frontNode\n        } else if (notRemoved) {\n            node.prevNode!.nextNode = node.nextNode\n            node.nextNode!.prevNode = node.prevNode\n        }\n\n        this.size--\n    }\n\n    public concatenate(anotherList: LinkedList<T>): void {\n        if (this.size && anotherList.size) {\n            this.backNode!.nextNode = anotherList.frontNode\n            anotherList.frontNode!.prevNode = this.backNode\n            this.backNode = anotherList.backNode\n\n            this.size += anotherList.size\n        }\n    }\n\n\n    [Symbol.iterator](): Iterator<ListNode<T>> {\n        let currentNode: ListNode<T> | null = this.iteratorStartNode\n\n        this.iteratorStartNode = this.frontNode\n\n        return {\n            next: () => {\n                const val = currentNode\n                if (val)\n                    currentNode = currentNode!.nextNode\n                return {\n                    done: val === null,\n                    value: val!\n                }\n            }\n        }\n    }\n}\n\n\nexport default LinkedList\n","import LinkedList, {ListNode} from \"@/data/models/clustering/DoubleLinkedList\";\nimport Dot from \"@/data/models/clustering/Dot\";\n\nclass Cluster {\n    constructor(public points: LinkedList<Dot>, public closest : ListNode<Cluster> | null, public minimalDistance: number, public distCol: number) {\n    }\n}\n\nexport default Cluster\n","import ClusteringInterface from \"@/data/interfaces/clustering/ClusteringInterface\";\nimport Dot from \"@/data/models/clustering/Dot\";\nimport LinkedList, {ListNode} from \"@/data/models/clustering/DoubleLinkedList\";\nimport Cluster from \"@/data/models/clustering/Cluster\";\n\nclass HierarchyClusteringRepository implements ClusteringInterface {\n    private static instance: HierarchyClusteringRepository\n\n    public static getInstance(): HierarchyClusteringRepository {\n        if (!HierarchyClusteringRepository.instance) {\n            HierarchyClusteringRepository.instance = new HierarchyClusteringRepository()\n        }\n\n        return HierarchyClusteringRepository.instance\n    }\n\n    public splitByClusters(dots: Dot[], numberOfClusters: number): Dot[] {\n        const clusters: LinkedList<Cluster> = new LinkedList<Cluster>()\n        for (let i = 0; i < dots.length; i++) {\n            clusters.pushBack(new Cluster(new LinkedList<Dot>(dots[i]), null, 99999, i))\n        }\n\n        const distances: number[][] = Array(dots.length)\n\n        for (let i = 0; i < dots.length; i++) {\n            distances[i] = Array(dots.length)\n        }\n\n        let globalMin = 9999\n        let bestCluster!: ListNode<Cluster>\n        let i = 0\n\n        for (const firstCluster of clusters) {\n            clusters.iteratorStartNode = firstCluster.nextNode\n\n            let j = i + 1\n\n            for (const secondCluster of clusters) {\n                const distance = Math.sqrt(\n                    Math.pow(dots[i].xCoordinate - dots[j].xCoordinate, 2) +\n                    Math.pow(dots[i].yCoordinate - dots[j].yCoordinate, 2)\n                )\n\n                distances[i][j] = distance\n                distances[j][i] = distance\n\n                if (distance < firstCluster.data.minimalDistance) {\n                    firstCluster.data.minimalDistance = distance\n                    firstCluster.data.closest = secondCluster\n\n                    if (distance < globalMin) {\n                        globalMin = distance\n                        bestCluster = firstCluster\n                    }\n                }\n\n                if (distance < secondCluster.data.minimalDistance) {\n                    secondCluster.data.minimalDistance = distance\n                    secondCluster.data.closest = firstCluster\n                }\n\n                j++\n            }\n\n            i++\n        }\n\n        while (clusters.size != numberOfClusters) {\n            bestCluster.data.points.concatenate(bestCluster.data.closest!.data.points)\n            bestCluster.data.minimalDistance = Number.MAX_VALUE\n\n            //метод одиночной связи\n            globalMin = Number.MAX_VALUE\n            const prevBest = bestCluster\n\n            const bestClusterIndexInDistancesTable: number = bestCluster.data.distCol\n            const closestToBestClusterIndex: number = bestCluster.data.closest!.data.distCol\n\n            clusters.remove(bestCluster.data.closest!)\n\n            for (const cluster of clusters) {\n                if (cluster === prevBest)\n                    continue\n\n                const currentCluster: number = cluster.data.distCol\n                const newDistance: number = Math.min(distances[bestClusterIndexInDistancesTable][currentCluster], distances[closestToBestClusterIndex][currentCluster])\n\n                distances[bestClusterIndexInDistancesTable][currentCluster] = newDistance\n                distances[currentCluster][bestClusterIndexInDistancesTable] = newDistance\n\n                if (newDistance < prevBest.data.minimalDistance) {\n                    prevBest.data.minimalDistance = newDistance\n                    prevBest.data.closest = cluster\n                }\n\n                if (newDistance <= cluster.data.minimalDistance) {\n                    cluster.data.minimalDistance = newDistance\n                    cluster.data.closest = prevBest\n                }\n\n                if (cluster.data.minimalDistance < globalMin) {\n                    globalMin = cluster.data.minimalDistance\n                    bestCluster = cluster\n                }\n            }\n        }\n\n        let clusterNumber = 0\n        for (const cluster of clusters) {\n            for (const dot of cluster.data.points)\n                dot.data.hierarchyIndex = clusterNumber\n            clusterNumber++\n        }\n\n        return dots\n    }\n}\n\nexport default HierarchyClusteringRepository\n","\nimport {Options, setup, Vue} from 'vue-class-component';\nimport Card from \"@/ui/components/card/Card.vue\";\nimport {useMeta} from \"vue-meta\";\nimport ClusteringDescription from \"@/ui/views/clusteringView/components/ClusteringDescription.vue\";\nimport VueSlider from \"vue-slider-component\";\nimport 'vue-slider-component/theme/antd.css'\nimport Dot from \"@/data/models/clustering/Dot\";\nimport KMeansClusteringRepository from \"@/data/repositories/clustering/KMeansClusteringRepository\";\nimport ClusteringDisplayState from \"@/ui/views/clusteringView/enums/ClusteringDisplayState\";\nimport HierarchyClusteringRepository from \"@/data/repositories/clustering/HierarchyClusteringRepository\";\nimport Error from \"@/ui/components/error/Error.vue\";\n\n\n@Options({\n    components: {\n        Error,\n        ClusteringDescription,\n        Card,\n        VueSlider\n    },\n})\nexport default class ClusteringView extends Vue {\n    meta = setup(() => useMeta({\n        title: '📦',\n        htmlAttrs: {lang: 'ru', amp: true}\n    }))\n\n    private dotsToDisplayField: Dot[] = []\n    private numberOfClustersField = 6\n\n    private canvas: HTMLCanvasElement | null = null\n    private canvasContext: CanvasRenderingContext2D | null = null\n\n    private clusteringDisplayState: ClusteringDisplayState | null = null\n    private isErrorDisplaying = false\n\n    private kMeansColorsArray: string[] | null = null\n    private hierarchyColorsArray: string[] | null = null\n\n    private set dotsToDisplay(newValue: Dot[]) {\n        this.dotsToDisplayField = newValue\n\n        this.drawDots()\n    }\n\n    private get dotsToDisplay() {\n        return this.dotsToDisplayField\n    }\n\n    private get numberOfClusters() {\n        return this.numberOfClustersField\n    }\n\n    private set numberOfClusters(newValue: number) {\n        this.numberOfClustersField = newValue\n    }\n\n    private static areDotsNearby(firstDot: Dot, secondDot: Dot): boolean {\n        let centersDiff = Math.sqrt(Math.pow(firstDot.xCoordinate - secondDot.xCoordinate, 2)) +\n            Math.sqrt(Math.pow(firstDot.yCoordinate - secondDot.yCoordinate, 2)) - 25\n\n        return centersDiff <= 25\n    }\n\n    private static updateCardSize(card: HTMLElement | null) {\n        if (card) {\n            card.style.height = card.clientWidth + `px`\n        }\n    }\n\n    private canvasClickListener = (event: MouseEvent) => {\n        let canvasRect = (event.target as Element).getBoundingClientRect()\n\n        switch (this.clusteringDisplayState) {\n            case ClusteringDisplayState.DOTS_ADDING: {\n                if (canvasRect) {\n                    this.clearDots()\n\n                    let dotToAdd = new Dot(\n                        event.clientX - canvasRect.left,\n                        event.clientY - canvasRect.top\n                    )\n\n                    let isAbleToAddDot = true\n\n                    for (let i = 0; i < this.dotsToDisplay.length; i++) {\n                        let processingDot = this.dotsToDisplay[i]\n\n                        if (ClusteringView.areDotsNearby(dotToAdd, processingDot)) {\n                            isAbleToAddDot = false\n\n                            break\n                        }\n                    }\n\n                    if (isAbleToAddDot) {\n                        let dots = this.dotsToDisplay\n                        dots.push(dotToAdd)\n\n                        this.dotsToDisplay = dots\n                    }\n                }\n\n                break\n            }\n\n            case ClusteringDisplayState.DOTS_REMOVING: {\n                if (canvasRect) {\n                    this.clearDots()\n\n                    let clickDot = new Dot(\n                        event.clientX - canvasRect.left,\n                        event.clientY - canvasRect.top)\n\n                    for (let i = 0; i < this.dotsToDisplay.length; i++) {\n                        let processingDot = this.dotsToDisplay[i]\n\n                        if (ClusteringView.areDotsNearby(clickDot, processingDot)) {\n                            let dots = this.dotsToDisplay\n                            dots.splice(i, 1)\n\n                            this.dotsToDisplay = dots\n\n                            break\n                        }\n                    }\n                }\n\n                break\n            }\n        }\n    }\n\n    private initCanvasOnClickListener() {\n        this.canvas?.addEventListener('click', this.canvasClickListener)\n    }\n\n    private removeCanvasClickListener() {\n        this.canvas?.removeEventListener('click', this.canvasClickListener)\n    }\n\n    private initCanvas() {\n        this.canvas = document.getElementById(\"clusterCanvas\") as HTMLCanvasElement\n        this.canvasContext = this.canvas.getContext(\"2d\")\n\n        this.updateCanvasSize()\n    }\n\n    private initCardWidthListener() {\n        let card = document.getElementById(\"clusteringCard\")\n\n        ClusteringView.updateCardSize(card)\n        this.updateCanvasSize()\n\n        window?.addEventListener('resize', () => {\n            ClusteringView.updateCardSize(card)\n            this.updateCanvasSize()\n        })\n    }\n\n    private initAddDotButtonOnClickListener() {\n        let addDotButton = document.getElementById(\"addDotButton\")\n\n        addDotButton?.addEventListener('click', () => {\n            this.clusteringDisplayState = ClusteringDisplayState.DOTS_ADDING\n        })\n    }\n\n    private initRemoveDotButtonOnClickListener() {\n        let removeDotButton = document.getElementById(\"removeDotButton\")\n\n        removeDotButton?.addEventListener('click', () => {\n            this.clusteringDisplayState = ClusteringDisplayState.DOTS_REMOVING\n        })\n    }\n\n    private initKMeansButtonOnClickListener() {\n        let kMeansButton = document.getElementById(\"kMeansButton\")\n\n        kMeansButton?.addEventListener('click', () => {\n            if (this.numberOfClusters <= this.dotsToDisplay.length) {\n                this.isErrorDisplaying = false\n\n                this.clearDots()\n\n                this.clusteringDisplayState = null\n\n                this.dotsToDisplay = KMeansClusteringRepository\n                    .getInstance()\n                    .splitByClusters(this.dotsToDisplay, this.numberOfClusters)\n            } else {\n                this.isErrorDisplaying = true\n            }\n        })\n    }\n\n    private initHierarchyButtonOnClickListener() {\n        let hierarchyButton = document.getElementById(\"hierarchyButton\")\n\n        hierarchyButton?.addEventListener('click', () => {\n            if (this.numberOfClusters <= this.dotsToDisplay.length) {\n                this.isErrorDisplaying = false\n\n                this.clearDots()\n\n                this.clusteringDisplayState = null\n\n                this.dotsToDisplay = HierarchyClusteringRepository\n                    .getInstance()\n                    .splitByClusters(this.dotsToDisplay, this.numberOfClusters)\n            } else {\n                this.isErrorDisplaying = true\n            }\n        })\n    }\n\n    private initComparisonButtonOnClickListener() {\n        let comparisonButton = document.getElementById(\"comparisonButton\")\n\n        comparisonButton?.addEventListener('click', () => {\n            if (this.numberOfClusters <= this.dotsToDisplay.length) {\n                this.isErrorDisplaying = false\n\n                this.clearDots()\n\n                this.clusteringDisplayState = null\n\n                this.dotsToDisplay = HierarchyClusteringRepository\n                    .getInstance()\n                    .splitByClusters(this.dotsToDisplay, this.numberOfClusters)\n\n                this.dotsToDisplay = KMeansClusteringRepository\n                    .getInstance()\n                    .splitByClusters(this.dotsToDisplay, this.numberOfClusters)\n            } else {\n                this.isErrorDisplaying = true\n            }\n        })\n    }\n\n    private initContainerWidthListener() {\n        new ResizeObserver(() => this.updateCanvasSize()).observe(document.getElementById(\"container\")!)\n    }\n\n    private initColorsArrays() {\n        this.kMeansColorsArray = [\"#ADA8F1\", \"#474555\", \"#ACA9BB\", \"#F69591\", \"#BB615F\", \"#574240\", \"#BFA5A3\", \"#71823B\", \"#3F510A\", \"#E5DBCE\"]\n        this.hierarchyColorsArray = [\"#514438\", \"#ED992A\", \"#0090B4\", \"#B8A89A\", \"#00C77F\", \"#00ABBB\", \"#00C77F\", \"#00C9DD\", \"#BEFCFF\", \"#458084\"]\n    }\n\n    private updateCanvasSize() {\n        let clusteringCard = document.getElementById(\"clusteringCard\")\n\n        if (clusteringCard) {\n            if (this.canvas) {\n                let clusteringCardOffsetWidth = clusteringCard!.offsetWidth - 30\n                let clusteringCardOffsetHeight = clusteringCard!.offsetHeight - 40\n\n                this.canvas.width = clusteringCardOffsetWidth\n                this.canvas.height = clusteringCardOffsetHeight\n\n                this.canvas.style.width = clusteringCardOffsetWidth + \"px\"\n                this.canvas.style.height = clusteringCardOffsetHeight + \"px\"\n            }\n        }\n        this.drawDots()\n    }\n\n    private drawDots() {\n        if (this.canvas) {\n            this.canvasContext?.clearRect(0, 0, this.canvas.width, this.canvas.height)\n            this.canvasContext?.beginPath()\n            this.canvasContext?.closePath()\n        }\n\n        this.dotsToDisplay.forEach((dot) => {\n            if (this.canvasContext) {\n                this.canvasContext.moveTo(dot.xCoordinate, dot.yCoordinate)\n\n                this.canvasContext.beginPath()\n\n                this.canvasContext.lineWidth = 20\n\n                if (dot.hierarchyIndex != null && dot.kMeansIndex != null) {\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, -Math.PI / 2, Math.PI / 2)\n\n                    if (this.hierarchyColorsArray) {\n                        this.canvasContext.strokeStyle = this.hierarchyColorsArray[dot.hierarchyIndex]\n\n                        this.canvasContext.stroke()\n                    }\n\n                    this.canvasContext.beginPath()\n\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, Math.PI / 2, -Math.PI / 2)\n\n                    if (this.kMeansColorsArray) {\n                        this.canvasContext.strokeStyle = this.kMeansColorsArray[dot.kMeansIndex]\n\n                        this.canvasContext.stroke()\n                    }\n                }\n\n                if (dot.hierarchyIndex != null && dot.kMeansIndex == null) {\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, 0, 2 * Math.PI)\n\n                    if (this.hierarchyColorsArray) {\n                        this.canvasContext.strokeStyle = this.hierarchyColorsArray[dot.hierarchyIndex]\n                    }\n\n                    this.canvasContext.stroke()\n                }\n\n                if (dot.kMeansIndex != null && dot.hierarchyIndex == null) {\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, 0, 2 * Math.PI)\n\n                    if (this.kMeansColorsArray) {\n                        this.canvasContext.strokeStyle = this.kMeansColorsArray[dot.kMeansIndex]\n                    }\n\n                    this.canvasContext.stroke()\n                }\n\n                if (dot.kMeansIndex == null && dot.hierarchyIndex == null) {\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, 0, 2 * Math.PI)\n\n                    this.canvasContext.strokeStyle = \"#000000\"\n\n                    this.canvasContext.stroke()\n                }\n            }\n        })\n    }\n\n    private clearDots() {\n        for (let i = 0; i < this.dotsToDisplay.length; i++) {\n            this.dotsToDisplay[i].hierarchyIndex = null\n            this.dotsToDisplay[i].kMeansIndex = null\n        }\n    }\n\n    mounted() {\n        this.initContainerWidthListener()\n        this.initColorsArrays()\n        this.initCanvas()\n        this.initCardWidthListener()\n        this.initAddDotButtonOnClickListener()\n        this.initRemoveDotButtonOnClickListener()\n        this.initKMeansButtonOnClickListener()\n        this.initHierarchyButtonOnClickListener()\n        this.initComparisonButtonOnClickListener()\n        this.initCanvasOnClickListener()\n    }\n}\n","import { render } from \"./ClusteringView.vue?vue&type=template&id=37793bbf&scoped=true&ts=true\"\nimport script from \"./ClusteringView.vue?vue&type=script&lang=ts\"\nexport * from \"./ClusteringView.vue?vue&type=script&lang=ts\"\n\nimport \"./ClusteringView.vue?vue&type=style&index=0&id=37793bbf&scoped=true&lang=css\"\n\nimport exportComponent from \"/Users/delet-dis/Documents/projects/Frontend/interesting-algorithms/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-37793bbf\"]])\n\nexport default __exports__"],"names":["_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","class","id","_hoisted_2","_hoisted_3","_hoisted_4","_createElementVNode","_hoisted_5","_hoisted_6","_hoisted_7","ref","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","render","_ctx","_cache","$props","$setup","$data","$options","_component_ClusteringDescription","_resolveComponent","_component_Card","_component_Error","_component_vue_slider","_openBlock","_createElementBlock","_createVNode","default","_withCtx","_","_normalizeClass","isErrorDisplaying","modelValue","numberOfClusters","$event","dotSize","max","min","silent","_Fragment","ClusteringDescription","Vue","Options","components","__exports__","Dot","constructor","xCoordinate","yCoordinate","kMeansIndex","hierarchyIndex","Cluster","setCenter","sumX","sumY","this","dots","forEach","dot","lastX","currentX","lastY","currentY","length","KMeansClusteringRepository","instance","identifyCenters","k","allDots","size","step","iterator","j","clusters","Math","floor","bind","clustersNumber","i","minimalDistance","Number","MAX_VALUE","arrayPos","currentDistance","sqrt","pow","push","splitByClusters","numberOfClustersToCheck","p","ClusteringDisplayState","ListNode","data","prevNode","nextNode","Symbol","LinkedList","args","pushBack","element","backNode","frontNode","iteratorStartNode","remove","node","notRemoved","concatenate","anotherList","currentNode","next","val","done","value","points","closest","distCol","HierarchyClusteringRepository","distances","Array","bestCluster","globalMin","firstCluster","secondCluster","distance","prevBest","bestClusterIndexInDistancesTable","closestToBestClusterIndex","cluster","currentCluster","newDistance","clusterNumber","ClusteringView","setup","useMeta","title","htmlAttrs","lang","amp","event","canvasRect","target","getBoundingClientRect","clusteringDisplayState","clearDots","dotToAdd","clientX","left","clientY","top","isAbleToAddDot","dotsToDisplay","processingDot","ClusteringView_1","areDotsNearby","clickDot","splice","newValue","dotsToDisplayField","drawDots","numberOfClustersField","firstDot","secondDot","centersDiff","card","style","height","clientWidth","initCanvasOnClickListener","canvas","addEventListener","canvasClickListener","removeCanvasClickListener","removeEventListener","initCanvas","document","getElementById","canvasContext","getContext","updateCanvasSize","initCardWidthListener","updateCardSize","window","initAddDotButtonOnClickListener","addDotButton","initRemoveDotButtonOnClickListener","removeDotButton","initKMeansButtonOnClickListener","kMeansButton","initHierarchyButtonOnClickListener","hierarchyButton","initComparisonButtonOnClickListener","comparisonButton","initContainerWidthListener","ResizeObserver","observe","initColorsArrays","kMeansColorsArray","hierarchyColorsArray","clusteringCard","clusteringCardOffsetWidth","offsetWidth","clusteringCardOffsetHeight","offsetHeight","width","clearRect","beginPath","closePath","moveTo","lineWidth","arc","PI","strokeStyle","stroke","mounted","Error","Card","VueSlider"],"sourceRoot":""}