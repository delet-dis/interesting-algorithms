{"version":3,"file":"js/124.e3b03533.js","mappings":"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","sources":["webpack://interesting-algorithms/./src/ui/views/clusteringView/ClusteringView.vue?fe43","webpack://interesting-algorithms/./src/ui/views/clusteringView/components/ClusteringDescription.vue?bc67","webpack://interesting-algorithms/./src/ui/views/clusteringView/components/ClusteringDescription.vue?cd0c","webpack://interesting-algorithms/./src/ui/views/clusteringView/components/ClusteringDescription.vue","webpack://interesting-algorithms/./src/data/models/clustering/Dot.ts","webpack://interesting-algorithms/./src/data/classes/clustering/Cluster.ts","webpack://interesting-algorithms/./src/data/repositories/clustering/KMeansClusteringRepository.ts","webpack://interesting-algorithms/./src/ui/views/clusteringView/enums/ClusteringDisplayState.ts","webpack://interesting-algorithms/./src/data/models/clustering/DoubleLinkedList.ts","webpack://interesting-algorithms/./src/data/repositories/clustering/HierarchyClusteringRepository.ts","webpack://interesting-algorithms/./src/ui/views/clusteringView/ClusteringView.vue?111f","webpack://interesting-algorithms/./src/ui/views/clusteringView/ClusteringView.vue"],"sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-41ef7b18\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = {\n  class: \"container\",\n  id: \"container\"\n}\nconst _hoisted_2 = { class: \"row\" }\nconst _hoisted_3 = { class: \"col-lg-3 col-md-12\" }\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \" Ошибка \", -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" Количество точек меньше количества кластеров \", -1))\nconst _hoisted_6 = { class: \"col-lg-6 col-md-12\" }\nconst _hoisted_7 = {\n  class: \"clusterCanvas\",\n  id: \"clusterCanvas\",\n  ref: \"clusterCanvas\"\n}\nconst _hoisted_8 = { class: \"col-lg-3 col-md-12\" }\nconst _hoisted_9 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \" Конфигуратор алгоритма \", -1))\nconst _hoisted_10 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" Количество кластеров \", -1))\nconst _hoisted_11 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"separator\" }, null, -1))\nconst _hoisted_12 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" Действия с точками \", -1))\nconst _hoisted_13 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-action\",\n  id: \"addDotButton\"\n}, \" Добавить точки \", -1))\nconst _hoisted_14 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"spacer\" }, null, -1))\nconst _hoisted_15 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-caution\",\n  id: \"removeDotButton\"\n}, \" Удалить точки \", -1))\nconst _hoisted_16 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"separator\" }, null, -1))\nconst _hoisted_17 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" Тип кластеризации \", -1))\nconst _hoisted_18 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-royal\",\n  id: \"kMeansButton\"\n}, \" К-Средних \", -1))\nconst _hoisted_19 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"spacer\" }, null, -1))\nconst _hoisted_20 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-royal\",\n  id: \"hierarchyButton\"\n}, \" Иерархический \", -1))\nconst _hoisted_21 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"spacer\" }, null, -1))\nconst _hoisted_22 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-primary button-glow\",\n  id: \"comparisonButton\"\n}, \" Сравнение алгоритмов \", -1))\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ClusteringDescription = _resolveComponent(\"ClusteringDescription\")!\n  const _component_Card = _resolveComponent(\"Card\")!\n  const _component_Error = _resolveComponent(\"Error\")!\n  const _component_vue_slider = _resolveComponent(\"vue-slider\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createElementVNode(\"div\", _hoisted_3, [\n        _createVNode(_component_Card, { class: \"descriptionCard\" }, {\n          default: _withCtx(() => [\n            _createVNode(_component_ClusteringDescription)\n          ]),\n          _: 1\n        }),\n        _createVNode(_component_Error, {\n          id: \"error\",\n          class: _normalizeClass({'error-displaying':_ctx.isErrorDisplaying})\n        }, {\n          default: _withCtx(() => [\n            _hoisted_4,\n            _hoisted_5\n          ]),\n          _: 1\n        }, 8, [\"class\"])\n      ]),\n      _createElementVNode(\"div\", _hoisted_6, [\n        _createVNode(_component_Card, {\n          class: \"cardCenter clusteringCard\",\n          id: \"clusteringCard\"\n        }, {\n          default: _withCtx(() => [\n            _createElementVNode(\"canvas\", _hoisted_7, null, 512)\n          ]),\n          _: 1\n        })\n      ]),\n      _createElementVNode(\"div\", _hoisted_8, [\n        _createVNode(_component_Card, null, {\n          default: _withCtx(() => [\n            _hoisted_9,\n            _hoisted_10,\n            _createVNode(_component_vue_slider, {\n              modelValue: _ctx.numberOfClusters,\n              \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.numberOfClusters) = $event)),\n              dotSize: 20,\n              max: 10,\n              min: 2,\n              silent: true\n            }, null, 8, [\"modelValue\"]),\n            _hoisted_11,\n            _hoisted_12,\n            _hoisted_13,\n            _hoisted_14,\n            _hoisted_15,\n            _hoisted_16,\n            _hoisted_17,\n            _hoisted_18,\n            _hoisted_19,\n            _hoisted_20,\n            _hoisted_21,\n            _hoisted_22\n          ]),\n          _: 1\n        })\n      ])\n    ])\n  ]))\n}","import { createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \" Алгоритм кластеризации \", -1)\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", null, \" Бонусная реализация \", -1)\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"p\", null, \" Алгоритм для разбиения точек на кластеры \", -1)\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _hoisted_1,\n    _hoisted_2,\n    _hoisted_3\n  ], 64))\n}","\nimport {Options, Vue} from 'vue-class-component';\n\n\n@Options({\n    components: {\n    },\n})\nexport default class ClusteringDescription extends Vue {\n}\n","import { render } from \"./ClusteringDescription.vue?vue&type=template&id=7fdc5f04&ts=true\"\nimport script from \"./ClusteringDescription.vue?vue&type=script&lang=ts\"\nexport * from \"./ClusteringDescription.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/Users/delet-dis/Documents/projects/Frontend/interesting-algorithms/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","class Dot {\n    constructor(public xCoordinate: number, public yCoordinate: number, public kMeansIndex: number | null = null, public hierarchyIndex: number | null = null) {\n    }\n}\n\nexport default Dot\n","import Dot from \"@/data/models/clustering/Dot\";\nclass Cluster{\n    curX:number\n    curY:number\n    arr:Dot[]\n    lastX:number\n    lastY:number\n    constructor() {\n        this.curX=-1\n        this.curY=-1\n        this.lastY=-1\n        this.lastX=-1\n        this.arr=[]\n    }\n    SetCenter(){\n        let sumX=0\n        let sumY=0\n        let i=0\n        for(; i<this.arr.length;sumX+=this.arr[i].xCoordinate,i++){\n            // empty\n        }\n        i=0\n        for(; i<this.arr.length;sumY+=this.arr[i].yCoordinate,i++){\n            // empty\n        }\n        this.lastX=this.curX\n        this.lastY=this.curY\n        this.curX=sumX/this.arr.length\n        this.curY=sumY/this.arr.length\n    }\n}\nexport default Cluster","import ClusteringInterface from \"@/data/interfaces/clustering/ClusteringInterface\";\nimport Dot from \"@/data/models/clustering/Dot\";\nimport Cluster from \"@/data/classes/clustering/Cluster\";\n\nclass KMeansClusteringRepository implements ClusteringInterface {\n    private static instance: KMeansClusteringRepository\n\n    public static getInstance(): KMeansClusteringRepository {\n        if (!KMeansClusteringRepository.instance) {\n            KMeansClusteringRepository.instance = new KMeansClusteringRepository()\n        }\n\n        return KMeansClusteringRepository.instance\n    }\n\n    private clusArr: Cluster[] = []\n\n    private IdentifyCenters(k: number, allDots: Dot[]): void {\n        const size = allDots.length\n        const step = size / k\n        let steper = 0\n        for (let j = 0; j < k; j++, steper += step) {\n\n            this.clusArr[j].curX = allDots[Math.floor(steper)].xCoordinate\n            this.clusArr[j].curY = allDots[Math.floor(steper)].yCoordinate\n        }\n\n    }\n\n    private Bind(allDots: Dot[], clustersNumber: number): Dot[] {\n        for (let i = 0; i < clustersNumber; i++) {\n            this.clusArr[i].arr = []\n        }\n        for (let i = 0; i < allDots.length; i++) {\n            let minDist = 10000\n            let arrayPos = -1\n            for (let j = 0; j < this.clusArr.length; j++) {\n                const curDist = Math.sqrt(Math.pow(allDots[i].xCoordinate - this.clusArr[j].curX, 2) + Math.pow(allDots[i].yCoordinate - this.clusArr[j].curY, 2))\n                if (curDist < minDist) {\n                    minDist = curDist\n                    allDots[i].kMeansIndex = j\n                    arrayPos = j\n                }\n            }\n            this.clusArr[arrayPos].arr.push(allDots[i])\n\n        }\n        return allDots\n    }\n\n    splitByClusters(dots: Dot[], numberOfClusters: number): Dot[] {\n        this.clusArr=[]\n        for (let i = 0; i < numberOfClusters; i++)\n            this.clusArr[i] = new Cluster()\n        this.IdentifyCenters(numberOfClusters, dots)\n        for (; ;) {\n            let chk = 0\n            dots = this.Bind(dots, numberOfClusters)\n\n            for (let j = 0; j < this.clusArr.length; j++) {\n                this.clusArr[j].SetCenter()\n            }\n            for (let p = 0; p < numberOfClusters; p++) {\n                if (this.clusArr[p].curX == this.clusArr[p].lastX && this.clusArr[p].curY == this.clusArr[p].lastY)\n                    chk++\n            }\n\n            if (chk == numberOfClusters) {\n                break\n            }\n        }\n        return dots;\n    }\n}\n\nexport default KMeansClusteringRepository\n","enum ClusteringDisplayState {\n    DOTS_ADDING,\n    DOTS_REMOVING\n}\n\nexport default ClusteringDisplayState\n","export class ListNode < T > {\n    constructor(public data: T, public prevNode: ListNode < T > | null, public nextNode: ListNode < T > | null) {}\n}\n\nclass List < T > implements Iterable < ListNode < T >> {\n    private frontNode: ListNode < T > | null = null\n    private backNode: ListNode < T > | null = null\n    public iteratorStartNode: ListNode < T > | null = null\n    public size = 0\n\n    constructor(...args: T[]) {\n        for (const i of args)\n            this.push_back(i)\n    }\n\n    public push_back(element: T): void {\n        if (this.backNode === null) {\n            this.backNode = new ListNode < T > (element, null, null)\n            this.frontNode = this.backNode\n            this.iteratorStartNode = this.frontNode\n        } else {\n            this.backNode.nextNode = new ListNode < T > (element, this.backNode, null)\n            this.backNode = this.backNode.nextNode\n        }\n\n        this.size++\n    }\n\n    public remove(node: ListNode < T > ): void {\n        let notRemoved = true\n        if (node === this.backNode) {\n            if (node.prevNode)\n                node.prevNode!.nextNode = null\n            this.backNode = node.prevNode\n            notRemoved = false\n        }\n        if (node === this.frontNode) {\n            if (node.nextNode)\n                node.nextNode!.prevNode = null\n            this.frontNode = node.nextNode\n            this.iteratorStartNode = this.frontNode\n            notRemoved = false\n        } else if (notRemoved) {\n            node.prevNode!.nextNode = node.nextNode\n            node.nextNode!.prevNode = node.prevNode\n        }\n\n        this.size--\n    }\n\n    public concat(anotherList: List < T > ): void {\n        if (this.size && anotherList.size) {\n            this.backNode!.nextNode = anotherList.frontNode\n            anotherList.frontNode!.prevNode = this.backNode\n            this.backNode = anotherList.backNode\n            this.size += anotherList.size\n        }\n    }\n\n\n    [Symbol.iterator](): Iterator < ListNode < T >> {\n        let currentNode: ListNode < T > | null = this.iteratorStartNode\n        this.iteratorStartNode = this.frontNode\n        return {\n            next: () => {\n                const val = currentNode\n                if (val)\n                    currentNode = currentNode!.nextNode\n                return {\n                    done: val === null,\n                    value: val!\n                }\n            }\n        }\n\n    }\n\n}\n\n\nexport default List","import ClusteringInterface from \"@/data/interfaces/clustering/ClusteringInterface\";\nimport Dot from \"@/data/models/clustering/Dot\";\nimport List, {ListNode} from \"@/data/models/clustering/DoubleLinkedList\";\n\ntype Cluster = {\n    points: List<Dot>\n    closest ? : ListNode<Cluster>\n    minDist: number\n    distCol: number\n}\n\nclass HierarchyClusteringRepository implements ClusteringInterface {\n    private static instance: HierarchyClusteringRepository\n\n    public static getInstance(): HierarchyClusteringRepository {\n        if (!HierarchyClusteringRepository.instance) {\n            HierarchyClusteringRepository.instance = new HierarchyClusteringRepository()\n        }\n\n        return HierarchyClusteringRepository.instance\n    }\n\n    public splitByClusters(dots: Dot[], numberOfClusters: number): Dot[] {\n        const clusters: List < Cluster > = new List < Cluster > ()\n        for (let i = 0; i < dots.length; i++) {\n            clusters.push_back({\n                points: new List<Dot>(dots[i]),\n                minDist: 99999,\n                distCol: i\n            })\n        }\n\n\n        const distances: number[][] = Array(dots.length)\n        for (let i = 0; i < dots.length; i++)\n            distances[i] = Array(dots.length)\n        let globalMin = 9999\n        let bestCluster!: ListNode<Cluster> // will be init in next cycle\n            let i = 0\n\n        for (const cl1 of clusters) {\n            clusters.iteratorStartNode = cl1.nextNode\n            let j = i + 1\n            for (const cl2 of clusters) {\n                const distance = Math.sqrt(\n                    Math.pow(dots[i].xCoordinate - dots[j].xCoordinate, 2) +\n                    Math.pow(dots[i].yCoordinate - dots[j].yCoordinate, 2)\n                )\n                distances[i][j] = distance\n                distances[j][i] = distance\n\n                if (distance < cl1.data.minDist) {\n                    cl1.data.minDist = distance\n                    cl1.data.closest = cl2\n                    if (distance < globalMin) {\n                        globalMin = distance\n                        bestCluster = cl1\n                    }\n                }\n\n                if (distance < cl2.data.minDist) {\n                    cl2.data.minDist = distance\n                    cl2.data.closest = cl1\n                }\n\n                j++\n            }\n\n            i++\n        }\n\n        while (clusters.size != numberOfClusters) {\n            bestCluster.data.points.concat(bestCluster.data.closest!.data.points)\n            bestCluster.data.minDist = 9999\n\n            //метод одиночной связи\n            globalMin = 9999\n            const prevBest = bestCluster\n            const bcl: number = bestCluster.data.distCol\n            const cbcl: number = bestCluster.data.closest!.data.distCol\n            clusters.remove(bestCluster.data.closest!)\n            for (const cl of clusters) {\n                if (cl === prevBest)\n                    continue\n\n                const ncl: number = cl.data.distCol\n                const newDistance: number = Math.min(distances[bcl][ncl], distances[cbcl][ncl])\n                distances[bcl][ncl] = newDistance\n                distances[ncl][bcl] = newDistance\n\n                if (newDistance < prevBest.data.minDist) {\n                    prevBest.data.minDist = newDistance\n                    prevBest.data.closest = cl\n                }\n\n                if (newDistance <= cl.data.minDist) {\n                    cl.data.minDist = newDistance\n                    cl.data.closest = prevBest\n                }\n\n                if (cl.data.minDist < globalMin) {\n                    globalMin = cl.data.minDist\n                    bestCluster = cl\n                }\n            }\n\n        }\n\n        let clusterNum = 0\n        for (const cl of clusters) {\n            for (const dot of cl.data.points)\n                dot.data.hierarchyIndex = clusterNum\n            clusterNum++\n        }\n\n\n        return dots;\n    }\n}\n\nexport default HierarchyClusteringRepository","\nimport {Options, setup, Vue} from 'vue-class-component';\nimport Card from \"@/ui/components/card/Card.vue\";\nimport {useMeta} from \"vue-meta\";\nimport \"../../../../node_modules/bootstrap/dist/css/bootstrap-grid.min.css\";\nimport ClusteringDescription from \"@/ui/views/clusteringView/components/ClusteringDescription.vue\";\nimport VueSlider from \"vue-slider-component\";\nimport 'vue-slider-component/theme/antd.css'\nimport Dot from \"@/data/models/clustering/Dot\";\nimport KMeansClusteringRepository from \"@/data/repositories/clustering/KMeansClusteringRepository\";\nimport ClusteringDisplayState from \"@/ui/views/clusteringView/enums/ClusteringDisplayState\";\nimport HierarchyClusteringRepository from \"@/data/repositories/clustering/HierarchyClusteringRepository\";\nimport Error from \"@/ui/components/error/Error.vue\";\n\n\n@Options({\n    components: {\n        Error,\n        ClusteringDescription,\n        Card,\n        VueSlider\n    },\n})\nexport default class ClusteringView extends Vue {\n    meta = setup(() => useMeta({\n        title: '📦',\n        htmlAttrs: {lang: 'ru', amp: true}\n    }))\n\n    private dotsToDisplayField: Dot[] = []\n    private numberOfClustersField = 6\n\n    private canvas: HTMLCanvasElement | null = null\n    private canvasContext: CanvasRenderingContext2D | null = null\n\n    private clusteringDisplayState: ClusteringDisplayState | null = null\n    private isErrorDisplaying = false\n\n    private kMeansColorsArray: string[] | null = null\n    private hierarchyColorsArray: string[] | null = null\n\n    private set dotsToDisplay(newValue: Dot[]) {\n        this.dotsToDisplayField = newValue\n\n        this.drawDots()\n    }\n\n    private get dotsToDisplay() {\n        return this.dotsToDisplayField\n    }\n\n    private get numberOfClusters() {\n        return this.numberOfClustersField\n    }\n\n    private set numberOfClusters(newValue: number) {\n        this.numberOfClustersField = newValue\n    }\n\n    private static areDotsNearby(firstDot: Dot, secondDot: Dot): boolean {\n        let centersDiff = Math.sqrt(Math.pow(firstDot.xCoordinate - secondDot.xCoordinate, 2)) +\n            Math.sqrt(Math.pow(firstDot.yCoordinate - secondDot.yCoordinate, 2)) - 25\n\n        return centersDiff <= 25\n    }\n\n    private static updateCardSize(card: HTMLElement | null) {\n        if (card) {\n            card.style.height = card.clientWidth + `px`\n        }\n    }\n\n    private canvasClickListener = (event: MouseEvent) => {\n        let canvasRect = (event.target as Element).getBoundingClientRect()\n\n        switch (this.clusteringDisplayState) {\n            case ClusteringDisplayState.DOTS_ADDING: {\n                if (canvasRect) {\n                    this.clearDots()\n\n                    let dotToAdd = new Dot(\n                        event.clientX - canvasRect.left,\n                        event.clientY - canvasRect.top\n                    )\n\n                    let isAbleToAddDot = true\n\n                    for (let i = 0; i < this.dotsToDisplay.length; i++) {\n                        let processingDot = this.dotsToDisplay[i]\n\n                        if (ClusteringView.areDotsNearby(dotToAdd, processingDot)) {\n                            isAbleToAddDot = false\n\n                            break\n                        }\n                    }\n\n                    if (isAbleToAddDot) {\n                        let dots = this.dotsToDisplay\n                        dots.push(dotToAdd)\n\n                        this.dotsToDisplay = dots\n                    }\n                }\n\n                break\n            }\n\n            case ClusteringDisplayState.DOTS_REMOVING: {\n                if (canvasRect) {\n                    this.clearDots()\n\n                    let clickDot = new Dot(\n                        event.clientX - canvasRect.left,\n                        event.clientY - canvasRect.top)\n\n                    for (let i = 0; i < this.dotsToDisplay.length; i++) {\n                        let processingDot = this.dotsToDisplay[i]\n\n                        if (ClusteringView.areDotsNearby(clickDot, processingDot)) {\n                            let dots = this.dotsToDisplay\n                            dots.splice(i, 1)\n\n                            this.dotsToDisplay = dots\n\n                            break\n                        }\n                    }\n                }\n\n                break\n            }\n        }\n    }\n\n    private initCanvasOnClickListener() {\n        this.canvas?.addEventListener('click', this.canvasClickListener)\n    }\n\n    private removeCanvasClickListener() {\n        this.canvas?.removeEventListener('click', this.canvasClickListener)\n    }\n\n    private initCanvas() {\n        this.canvas = document.getElementById(\"clusterCanvas\") as HTMLCanvasElement\n        this.canvasContext = this.canvas.getContext(\"2d\")\n\n        this.updateCanvasSize()\n    }\n\n    private initCardWidthListener() {\n        let card = document.getElementById(\"clusteringCard\")\n\n        ClusteringView.updateCardSize(card)\n        this.updateCanvasSize()\n\n        window?.addEventListener('resize', () => {\n            ClusteringView.updateCardSize(card)\n            this.updateCanvasSize()\n        })\n    }\n\n    private initAddDotButtonOnClickListener() {\n        let addDotButton = document.getElementById(\"addDotButton\")\n\n        addDotButton?.addEventListener('click', () => {\n            this.clusteringDisplayState = ClusteringDisplayState.DOTS_ADDING\n        })\n    }\n\n    private initRemoveDotButtonOnClickListener() {\n        let removeDotButton = document.getElementById(\"removeDotButton\")\n\n        removeDotButton?.addEventListener('click', () => {\n            this.clusteringDisplayState = ClusteringDisplayState.DOTS_REMOVING\n        })\n    }\n\n    private initKMeansButtonOnClickListener() {\n        let kMeansButton = document.getElementById(\"kMeansButton\")\n\n        kMeansButton?.addEventListener('click', () => {\n            if (this.numberOfClusters <= this.dotsToDisplay.length) {\n                this.isErrorDisplaying = false\n\n                this.clearDots()\n\n                this.clusteringDisplayState = null\n\n                this.dotsToDisplay = KMeansClusteringRepository\n                    .getInstance()\n                    .splitByClusters(this.dotsToDisplay, this.numberOfClusters)\n            } else {\n                this.isErrorDisplaying = true\n            }\n        })\n    }\n\n    private initHierarchyButtonOnClickListener() {\n        let hierarchyButton = document.getElementById(\"hierarchyButton\")\n\n        hierarchyButton?.addEventListener('click', () => {\n            if (this.numberOfClusters <= this.dotsToDisplay.length) {\n                this.isErrorDisplaying = false\n\n                this.clearDots()\n\n                this.clusteringDisplayState = null\n\n                this.dotsToDisplay = HierarchyClusteringRepository\n                    .getInstance()\n                    .splitByClusters(this.dotsToDisplay, this.numberOfClusters)\n            } else {\n                this.isErrorDisplaying = true\n            }\n        })\n    }\n\n    private initComparisonButtonOnClickListener() {\n        let comparisonButton = document.getElementById(\"comparisonButton\")\n\n        comparisonButton?.addEventListener('click', () => {\n            if (this.numberOfClusters <= this.dotsToDisplay.length) {\n                this.isErrorDisplaying = false\n\n                this.clearDots()\n\n                this.clusteringDisplayState = null\n\n                this.dotsToDisplay = HierarchyClusteringRepository\n                    .getInstance()\n                    .splitByClusters(this.dotsToDisplay, this.numberOfClusters)\n\n                this.dotsToDisplay = KMeansClusteringRepository\n                    .getInstance()\n                    .splitByClusters(this.dotsToDisplay, this.numberOfClusters)\n            } else {\n                this.isErrorDisplaying = true\n            }\n        })\n    }\n\n    private initContainerWidthListener() {\n        new ResizeObserver(() => this.updateCanvasSize()).observe(document.getElementById(\"container\")!)\n    }\n\n    private initColorsArrays() {\n        this.kMeansColorsArray = [\"#ADA8F1\", \"#474555\", \"#ACA9BB\", \"#F69591\", \"#BB615F\", \"#574240\", \"#BFA5A3\", \"#71823B\", \"#3F510A\", \"#E5DBCE\"]\n        this.hierarchyColorsArray = [\"#514438\", \"#ED992A\", \"#0090B4\", \"#B8A89A\", \"#00C77F\", \"#00ABBB\", \"#00C77F\", \"#00C9DD\", \"#BEFCFF\", \"#458084\"]\n    }\n\n    private updateCanvasSize() {\n        let clusteringCard = document.getElementById(\"clusteringCard\")\n\n        if (clusteringCard) {\n            if (this.canvas) {\n                let clusteringCardOffsetWidth = clusteringCard!.offsetWidth - 30\n                let clusteringCardOffsetHeight = clusteringCard!.offsetHeight - 40\n\n                this.canvas.width = clusteringCardOffsetWidth\n                this.canvas.height = clusteringCardOffsetHeight\n\n                this.canvas.style.width = clusteringCardOffsetWidth + \"px\"\n                this.canvas.style.height = clusteringCardOffsetHeight + \"px\"\n            }\n        }\n        this.drawDots()\n    }\n\n    private drawDots() {\n        if (this.canvas) {\n            this.canvasContext?.clearRect(0, 0, this.canvas.width, this.canvas.height)\n            this.canvasContext?.beginPath()\n            this.canvasContext?.closePath()\n        }\n\n        this.dotsToDisplay.forEach((dot) => {\n            if (this.canvasContext) {\n                this.canvasContext.moveTo(dot.xCoordinate, dot.yCoordinate)\n\n                this.canvasContext.beginPath()\n\n                this.canvasContext.lineWidth = 20\n\n                if (dot.hierarchyIndex != null && dot.kMeansIndex != null) {\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, -Math.PI / 2, Math.PI / 2)\n\n                    if (this.hierarchyColorsArray) {\n                        this.canvasContext.strokeStyle = this.hierarchyColorsArray[dot.hierarchyIndex]\n\n                        this.canvasContext.stroke()\n                    }\n\n                    this.canvasContext.beginPath()\n\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, Math.PI / 2, -Math.PI / 2)\n\n                    if (this.kMeansColorsArray) {\n                        this.canvasContext.strokeStyle = this.kMeansColorsArray[dot.kMeansIndex]\n\n                        this.canvasContext.stroke()\n                    }\n                }\n\n                if (dot.hierarchyIndex != null && dot.kMeansIndex == null) {\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, 0, 2 * Math.PI)\n\n                    if (this.hierarchyColorsArray) {\n                        this.canvasContext.strokeStyle = this.hierarchyColorsArray[dot.hierarchyIndex]\n                    }\n\n                    this.canvasContext.stroke()\n                }\n\n                if (dot.kMeansIndex != null && dot.hierarchyIndex == null) {\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, 0, 2 * Math.PI)\n\n                    if (this.kMeansColorsArray) {\n                        this.canvasContext.strokeStyle = this.kMeansColorsArray[dot.kMeansIndex]\n                    }\n\n                    this.canvasContext.stroke()\n                }\n\n                if (dot.kMeansIndex == null && dot.hierarchyIndex == null) {\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, 0, 2 * Math.PI)\n\n                    this.canvasContext.strokeStyle = \"#000000\"\n\n                    this.canvasContext.stroke()\n                }\n            }\n        })\n    }\n\n    private clearDots() {\n        for (let i = 0; i < this.dotsToDisplay.length; i++) {\n            this.dotsToDisplay[i].hierarchyIndex = null\n            this.dotsToDisplay[i].kMeansIndex = null\n        }\n    }\n\n    mounted() {\n        this.initContainerWidthListener()\n        this.initColorsArrays()\n        this.initCanvas()\n        this.initCardWidthListener()\n        this.initAddDotButtonOnClickListener()\n        this.initRemoveDotButtonOnClickListener()\n        this.initKMeansButtonOnClickListener()\n        this.initHierarchyButtonOnClickListener()\n        this.initComparisonButtonOnClickListener()\n        this.initCanvasOnClickListener()\n    }\n}\n","import { render } from \"./ClusteringView.vue?vue&type=template&id=41ef7b18&scoped=true&ts=true\"\nimport script from \"./ClusteringView.vue?vue&type=script&lang=ts\"\nexport * from \"./ClusteringView.vue?vue&type=script&lang=ts\"\n\nimport \"./ClusteringView.vue?vue&type=style&index=0&id=41ef7b18&scoped=true&lang=css\"\n\nimport exportComponent from \"/Users/delet-dis/Documents/projects/Frontend/interesting-algorithms/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-41ef7b18\"]])\n\nexport default __exports__"],"names":["_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","class","id","_hoisted_2","_hoisted_3","_hoisted_4","_createElementVNode","_hoisted_5","_hoisted_6","_hoisted_7","ref","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","render","_ctx","_cache","$props","$setup","$data","$options","_component_ClusteringDescription","_resolveComponent","_component_Card","_component_Error","_component_vue_slider","_openBlock","_createElementBlock","_createVNode","default","_withCtx","_","_normalizeClass","isErrorDisplaying","modelValue","numberOfClusters","$event","dotSize","max","min","silent","_Fragment","ClusteringDescription","Vue","Options","components","__exports__","Dot","constructor","xCoordinate","yCoordinate","kMeansIndex","hierarchyIndex","Cluster","this","curX","curY","lastY","lastX","arr","SetCenter","sumX","sumY","i","length","KMeansClusteringRepository","instance","IdentifyCenters","k","allDots","size","step","steper","j","clusArr","Math","floor","Bind","clustersNumber","minDist","arrayPos","curDist","sqrt","pow","push","splitByClusters","dots","chk","p","ClusteringDisplayState","ListNode","data","prevNode","nextNode","Symbol","iterator","List","args","push_back","element","backNode","frontNode","iteratorStartNode","remove","node","notRemoved","concat","anotherList","currentNode","next","val","done","value","HierarchyClusteringRepository","clusters","points","distCol","distances","Array","bestCluster","globalMin","cl1","cl2","distance","closest","prevBest","bcl","cbcl","cl","ncl","newDistance","clusterNum","dot","ClusteringView","setup","useMeta","title","htmlAttrs","lang","amp","event","canvasRect","target","getBoundingClientRect","clusteringDisplayState","clearDots","dotToAdd","clientX","left","clientY","top","isAbleToAddDot","dotsToDisplay","processingDot","ClusteringView_1","areDotsNearby","clickDot","splice","newValue","dotsToDisplayField","drawDots","numberOfClustersField","firstDot","secondDot","centersDiff","card","style","height","clientWidth","initCanvasOnClickListener","canvas","addEventListener","canvasClickListener","removeCanvasClickListener","removeEventListener","initCanvas","document","getElementById","canvasContext","getContext","updateCanvasSize","initCardWidthListener","updateCardSize","window","initAddDotButtonOnClickListener","addDotButton","initRemoveDotButtonOnClickListener","removeDotButton","initKMeansButtonOnClickListener","kMeansButton","initHierarchyButtonOnClickListener","hierarchyButton","initComparisonButtonOnClickListener","comparisonButton","initContainerWidthListener","ResizeObserver","observe","initColorsArrays","kMeansColorsArray","hierarchyColorsArray","clusteringCard","clusteringCardOffsetWidth","offsetWidth","clusteringCardOffsetHeight","offsetHeight","width","clearRect","beginPath","closePath","forEach","moveTo","lineWidth","arc","PI","strokeStyle","stroke","mounted","Error","Card","VueSlider"],"sourceRoot":""}