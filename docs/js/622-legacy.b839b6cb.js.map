{"version":3,"file":"js/622-legacy.b839b6cb.js","mappings":"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","sources":["webpack://interesting-algorithms/./src/ui/views/clusteringView/ClusteringView.vue?af34","webpack://interesting-algorithms/./src/ui/views/clusteringView/components/ClusteringDescription.vue?bc67","webpack://interesting-algorithms/./src/ui/views/clusteringView/components/ClusteringDescription.vue?cd0c","webpack://interesting-algorithms/./src/ui/views/clusteringView/components/ClusteringDescription.vue","webpack://interesting-algorithms/./src/data/models/clustering/Dot.ts","webpack://interesting-algorithms/./src/data/classes/clustering/Cluster.ts","webpack://interesting-algorithms/./src/data/repositories/clustering/KMeansClusteringRepository.ts","webpack://interesting-algorithms/./src/ui/views/clusteringView/enums/ClusteringDisplayState.ts","webpack://interesting-algorithms/./src/data/models/clustering/DoubleLinkedList.ts","webpack://interesting-algorithms/./src/data/models/clustering/Cluster.ts","webpack://interesting-algorithms/./src/data/repositories/clustering/HierarchyClusteringRepository.ts","webpack://interesting-algorithms/./src/ui/views/clusteringView/ClusteringView.vue?111f","webpack://interesting-algorithms/./src/ui/views/clusteringView/ClusteringView.vue"],"sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-37793bbf\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = {\n  class: \"container\",\n  id: \"container\"\n}\nconst _hoisted_2 = { class: \"row\" }\nconst _hoisted_3 = { class: \"col-lg-3 col-md-12\" }\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \" Я знаю точно – невозможное возможно \", -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" Количество точек меньше количества кластеров \", -1))\nconst _hoisted_6 = { class: \"col-lg-6 col-md-12\" }\nconst _hoisted_7 = {\n  class: \"clusterCanvas\",\n  id: \"clusterCanvas\",\n  ref: \"clusterCanvas\"\n}\nconst _hoisted_8 = { class: \"col-lg-3 col-md-12\" }\nconst _hoisted_9 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \" Конфигуратор алгоритма \", -1))\nconst _hoisted_10 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" Количество кластеров \", -1))\nconst _hoisted_11 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"separator\" }, null, -1))\nconst _hoisted_12 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" Действия с точками \", -1))\nconst _hoisted_13 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-action\",\n  id: \"addDotButton\"\n}, \" Добавить точки \", -1))\nconst _hoisted_14 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"spacer\" }, null, -1))\nconst _hoisted_15 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-caution\",\n  id: \"removeDotButton\"\n}, \" Удалить точки \", -1))\nconst _hoisted_16 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"separator\" }, null, -1))\nconst _hoisted_17 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" Тип кластеризации \", -1))\nconst _hoisted_18 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-royal\",\n  id: \"kMeansButton\"\n}, \" К-Средних \", -1))\nconst _hoisted_19 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"spacer\" }, null, -1))\nconst _hoisted_20 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-royal\",\n  id: \"hierarchyButton\"\n}, \" Иерархический \", -1))\nconst _hoisted_21 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"spacer\" }, null, -1))\nconst _hoisted_22 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"button button-border button-rounded button-primary button-glow\",\n  id: \"comparisonButton\"\n}, \" Сравнение алгоритмов \", -1))\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ClusteringDescription = _resolveComponent(\"ClusteringDescription\")!\n  const _component_Card = _resolveComponent(\"Card\")!\n  const _component_Error = _resolveComponent(\"Error\")!\n  const _component_vue_slider = _resolveComponent(\"vue-slider\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createElementVNode(\"div\", _hoisted_3, [\n        _createVNode(_component_Card, { class: \"descriptionCard\" }, {\n          default: _withCtx(() => [\n            _createVNode(_component_ClusteringDescription)\n          ]),\n          _: 1\n        }),\n        _createVNode(_component_Error, {\n          id: \"error\",\n          class: _normalizeClass({'error-displaying':_ctx.isErrorDisplaying})\n        }, {\n          default: _withCtx(() => [\n            _hoisted_4,\n            _hoisted_5\n          ]),\n          _: 1\n        }, 8, [\"class\"])\n      ]),\n      _createElementVNode(\"div\", _hoisted_6, [\n        _createVNode(_component_Card, {\n          class: \"cardCenter clusteringCard\",\n          id: \"clusteringCard\"\n        }, {\n          default: _withCtx(() => [\n            _createElementVNode(\"canvas\", _hoisted_7, null, 512)\n          ]),\n          _: 1\n        })\n      ]),\n      _createElementVNode(\"div\", _hoisted_8, [\n        _createVNode(_component_Card, null, {\n          default: _withCtx(() => [\n            _hoisted_9,\n            _hoisted_10,\n            _createVNode(_component_vue_slider, {\n              modelValue: _ctx.numberOfClusters,\n              \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.numberOfClusters) = $event)),\n              dotSize: 20,\n              max: 10,\n              min: 2,\n              silent: true\n            }, null, 8, [\"modelValue\"]),\n            _hoisted_11,\n            _hoisted_12,\n            _hoisted_13,\n            _hoisted_14,\n            _hoisted_15,\n            _hoisted_16,\n            _hoisted_17,\n            _hoisted_18,\n            _hoisted_19,\n            _hoisted_20,\n            _hoisted_21,\n            _hoisted_22\n          ]),\n          _: 1\n        })\n      ])\n    ])\n  ]))\n}","import { createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \" Алгоритм кластеризации \", -1)\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", null, \" Бонусная реализация \", -1)\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"p\", null, \" Алгоритм для разбиения точек на кластеры \", -1)\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _hoisted_1,\n    _hoisted_2,\n    _hoisted_3\n  ], 64))\n}","\nimport {Options, Vue} from 'vue-class-component';\n\n\n@Options({\n    components: {\n    },\n})\nexport default class ClusteringDescription extends Vue {\n}\n","import { render } from \"./ClusteringDescription.vue?vue&type=template&id=7fdc5f04&ts=true\"\nimport script from \"./ClusteringDescription.vue?vue&type=script&lang=ts\"\nexport * from \"./ClusteringDescription.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/Users/delet-dis/Documents/projects/Frontend/interesting-algorithms/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","class Dot {\n    constructor(public xCoordinate: number, public yCoordinate: number, public kMeansIndex: number | null = null, public hierarchyIndex: number | null = null) {\n    }\n}\n\nexport default Dot\n","import Dot from \"@/data/models/clustering/Dot\";\n\nclass Cluster {\n    currentX = -1\n    currentY = -1\n    dots: Dot[] = []\n    lastX = -1\n    lastY = -1\n\n    setCenter() {\n        let sumX = 0\n        let sumY = 0\n\n        this.dots.forEach((dot) => {\n            sumX += dot.xCoordinate\n            sumY += dot.yCoordinate\n        })\n\n        this.lastX = this.currentX\n        this.lastY = this.currentY\n\n        this.currentX = sumX / this.dots.length\n        this.currentY = sumY / this.dots.length\n    }\n}\n\nexport default Cluster\n","import ClusteringInterface from \"@/data/interfaces/clustering/ClusteringInterface\";\nimport Dot from \"@/data/models/clustering/Dot\";\nimport Cluster from \"@/data/classes/clustering/Cluster\";\n\nclass KMeansClusteringRepository implements ClusteringInterface {\n    private static instance: KMeansClusteringRepository\n\n    public static getInstance(): KMeansClusteringRepository {\n        if (!KMeansClusteringRepository.instance) {\n            KMeansClusteringRepository.instance = new KMeansClusteringRepository()\n        }\n\n        return KMeansClusteringRepository.instance\n    }\n\n    private clusters: Cluster[] = []\n\n    private identifyCenters(k: number, allDots: Dot[]): void {\n        const size = allDots.length\n        const step = size / k\n\n        let iterator = 0\n\n        for (let j = 0; j < k; j++, iterator += step) {\n            this.clusters[j].currentX = allDots[Math.floor(iterator)].xCoordinate\n            this.clusters[j].currentY = allDots[Math.floor(iterator)].yCoordinate\n        }\n    }\n\n    private bind(allDots: Dot[], clustersNumber: number): Dot[] {\n        for (let i = 0; i < clustersNumber; i++) {\n            this.clusters[i].dots = []\n        }\n\n        for (let i = 0; i < allDots.length; i++) {\n            let minimalDistance = Number.MAX_VALUE\n            let arrayPos = -1\n\n            for (let j = 0; j < this.clusters.length; j++) {\n                const currentDistance = Math.sqrt(Math.pow(allDots[i].xCoordinate - this.clusters[j].currentX, 2) +\n                    Math.pow(allDots[i].yCoordinate - this.clusters[j].currentY, 2))\n\n                if (currentDistance < minimalDistance) {\n                    minimalDistance = currentDistance\n                    allDots[i].kMeansIndex = j\n                    arrayPos = j\n                }\n            }\n            this.clusters[arrayPos].dots.push(allDots[i])\n\n        }\n        return allDots\n    }\n\n    splitByClusters(dots: Dot[], numberOfClusters: number): Dot[] {\n        this.clusters = []\n\n        for (let i = 0; i < numberOfClusters; i++) {\n            this.clusters[i] = new Cluster()\n        }\n\n        this.identifyCenters(numberOfClusters, dots)\n\n        let numberOfClustersToCheck = 0\n\n        while (numberOfClustersToCheck != numberOfClusters) {\n            numberOfClustersToCheck = 0\n\n            dots = this.bind(dots, numberOfClusters)\n\n            for (let j = 0; j < this.clusters.length; j++) {\n                this.clusters[j].setCenter()\n            }\n            for (let p = 0; p < numberOfClusters; p++) {\n                if (this.clusters[p].currentX == this.clusters[p].lastX && this.clusters[p].currentY == this.clusters[p].lastY)\n                    numberOfClustersToCheck++\n            }\n        }\n        return dots\n    }\n}\n\nexport default KMeansClusteringRepository\n","enum ClusteringDisplayState {\n    DOTS_ADDING,\n    DOTS_REMOVING\n}\n\nexport default ClusteringDisplayState\n","export class ListNode<T> {\n    constructor(public data: T, public prevNode: ListNode<T> | null, public nextNode: ListNode<T> | null) {\n    }\n}\n\nclass LinkedList<T> implements Iterable <ListNode<T>> {\n    private frontNode: ListNode<T> | null = null\n    private backNode: ListNode<T> | null = null\n    public iteratorStartNode: ListNode<T> | null = null\n    public size = 0\n\n    constructor(...args: T[]) {\n        for (const i of args)\n            this.pushBack(i)\n    }\n\n    public pushBack(element: T): void {\n        if (this.backNode === null) {\n            this.backNode = new ListNode<T>(element, null, null)\n            this.frontNode = this.backNode\n\n            this.iteratorStartNode = this.frontNode\n        } else {\n            this.backNode.nextNode = new ListNode<T>(element, this.backNode, null)\n            this.backNode = this.backNode.nextNode\n        }\n\n        this.size++\n    }\n\n    public remove(node: ListNode<T>): void {\n        let notRemoved = true\n\n        if (node === this.backNode) {\n            if (node.prevNode)\n                node.prevNode!.nextNode = null\n            this.backNode = node.prevNode\n            notRemoved = false\n        }\n\n        if (node === this.frontNode) {\n            if (node.nextNode)\n                node.nextNode!.prevNode = null\n            this.frontNode = node.nextNode\n            this.iteratorStartNode = this.frontNode\n        } else if (notRemoved) {\n            node.prevNode!.nextNode = node.nextNode\n            node.nextNode!.prevNode = node.prevNode\n        }\n\n        this.size--\n    }\n\n    public concatenate(anotherList: LinkedList<T>): void {\n        if (this.size && anotherList.size) {\n            this.backNode!.nextNode = anotherList.frontNode\n            anotherList.frontNode!.prevNode = this.backNode\n            this.backNode = anotherList.backNode\n\n            this.size += anotherList.size\n        }\n    }\n\n\n    [Symbol.iterator](): Iterator<ListNode<T>> {\n        let currentNode: ListNode<T> | null = this.iteratorStartNode\n\n        this.iteratorStartNode = this.frontNode\n\n        return {\n            next: () => {\n                const val = currentNode\n                if (val)\n                    currentNode = currentNode!.nextNode\n                return {\n                    done: val === null,\n                    value: val!\n                }\n            }\n        }\n    }\n}\n\n\nexport default LinkedList\n","import LinkedList, {ListNode} from \"@/data/models/clustering/DoubleLinkedList\";\nimport Dot from \"@/data/models/clustering/Dot\";\n\nclass Cluster {\n    constructor(public points: LinkedList<Dot>, public closest : ListNode<Cluster> | null, public minimalDistance: number, public distCol: number) {\n    }\n}\n\nexport default Cluster\n","import ClusteringInterface from \"@/data/interfaces/clustering/ClusteringInterface\";\nimport Dot from \"@/data/models/clustering/Dot\";\nimport LinkedList, {ListNode} from \"@/data/models/clustering/DoubleLinkedList\";\nimport Cluster from \"@/data/models/clustering/Cluster\";\n\nclass HierarchyClusteringRepository implements ClusteringInterface {\n    private static instance: HierarchyClusteringRepository\n\n    public static getInstance(): HierarchyClusteringRepository {\n        if (!HierarchyClusteringRepository.instance) {\n            HierarchyClusteringRepository.instance = new HierarchyClusteringRepository()\n        }\n\n        return HierarchyClusteringRepository.instance\n    }\n\n    public splitByClusters(dots: Dot[], numberOfClusters: number): Dot[] {\n        const clusters: LinkedList<Cluster> = new LinkedList<Cluster>()\n        for (let i = 0; i < dots.length; i++) {\n            clusters.pushBack(new Cluster(new LinkedList<Dot>(dots[i]), null, 99999, i))\n        }\n\n        const distances: number[][] = Array(dots.length)\n\n        for (let i = 0; i < dots.length; i++) {\n            distances[i] = Array(dots.length)\n        }\n\n        let globalMin = 9999\n        let bestCluster!: ListNode<Cluster>\n        let i = 0\n\n        for (const firstCluster of clusters) {\n            clusters.iteratorStartNode = firstCluster.nextNode\n\n            let j = i + 1\n\n            for (const secondCluster of clusters) {\n                const distance = Math.sqrt(\n                    Math.pow(dots[i].xCoordinate - dots[j].xCoordinate, 2) +\n                    Math.pow(dots[i].yCoordinate - dots[j].yCoordinate, 2)\n                )\n\n                distances[i][j] = distance\n                distances[j][i] = distance\n\n                if (distance < firstCluster.data.minimalDistance) {\n                    firstCluster.data.minimalDistance = distance\n                    firstCluster.data.closest = secondCluster\n\n                    if (distance < globalMin) {\n                        globalMin = distance\n                        bestCluster = firstCluster\n                    }\n                }\n\n                if (distance < secondCluster.data.minimalDistance) {\n                    secondCluster.data.minimalDistance = distance\n                    secondCluster.data.closest = firstCluster\n                }\n\n                j++\n            }\n\n            i++\n        }\n\n        while (clusters.size != numberOfClusters) {\n            bestCluster.data.points.concatenate(bestCluster.data.closest!.data.points)\n            bestCluster.data.minimalDistance = Number.MAX_VALUE\n\n            //метод одиночной связи\n            globalMin = Number.MAX_VALUE\n            const prevBest = bestCluster\n\n            const bestClusterIndexInDistancesTable: number = bestCluster.data.distCol\n            const closestToBestClusterIndex: number = bestCluster.data.closest!.data.distCol\n\n            clusters.remove(bestCluster.data.closest!)\n\n            for (const cluster of clusters) {\n                if (cluster === prevBest)\n                    continue\n\n                const currentCluster: number = cluster.data.distCol\n                const newDistance: number = Math.min(distances[bestClusterIndexInDistancesTable][currentCluster], distances[closestToBestClusterIndex][currentCluster])\n\n                distances[bestClusterIndexInDistancesTable][currentCluster] = newDistance\n                distances[currentCluster][bestClusterIndexInDistancesTable] = newDistance\n\n                if (newDistance < prevBest.data.minimalDistance) {\n                    prevBest.data.minimalDistance = newDistance\n                    prevBest.data.closest = cluster\n                }\n\n                if (newDistance <= cluster.data.minimalDistance) {\n                    cluster.data.minimalDistance = newDistance\n                    cluster.data.closest = prevBest\n                }\n\n                if (cluster.data.minimalDistance < globalMin) {\n                    globalMin = cluster.data.minimalDistance\n                    bestCluster = cluster\n                }\n            }\n        }\n\n        let clusterNumber = 0\n        for (const cluster of clusters) {\n            for (const dot of cluster.data.points)\n                dot.data.hierarchyIndex = clusterNumber\n            clusterNumber++\n        }\n\n        return dots\n    }\n}\n\nexport default HierarchyClusteringRepository\n","\nimport {Options, setup, Vue} from 'vue-class-component';\nimport Card from \"@/ui/components/card/Card.vue\";\nimport {useMeta} from \"vue-meta\";\nimport ClusteringDescription from \"@/ui/views/clusteringView/components/ClusteringDescription.vue\";\nimport VueSlider from \"vue-slider-component\";\nimport 'vue-slider-component/theme/antd.css'\nimport Dot from \"@/data/models/clustering/Dot\";\nimport KMeansClusteringRepository from \"@/data/repositories/clustering/KMeansClusteringRepository\";\nimport ClusteringDisplayState from \"@/ui/views/clusteringView/enums/ClusteringDisplayState\";\nimport HierarchyClusteringRepository from \"@/data/repositories/clustering/HierarchyClusteringRepository\";\nimport Error from \"@/ui/components/error/Error.vue\";\n\n\n@Options({\n    components: {\n        Error,\n        ClusteringDescription,\n        Card,\n        VueSlider\n    },\n})\nexport default class ClusteringView extends Vue {\n    meta = setup(() => useMeta({\n        title: '📦',\n        htmlAttrs: {lang: 'ru', amp: true}\n    }))\n\n    private dotsToDisplayField: Dot[] = []\n    private numberOfClustersField = 6\n\n    private canvas: HTMLCanvasElement | null = null\n    private canvasContext: CanvasRenderingContext2D | null = null\n\n    private clusteringDisplayState: ClusteringDisplayState | null = null\n    private isErrorDisplaying = false\n\n    private kMeansColorsArray: string[] | null = null\n    private hierarchyColorsArray: string[] | null = null\n\n    private set dotsToDisplay(newValue: Dot[]) {\n        this.dotsToDisplayField = newValue\n\n        this.drawDots()\n    }\n\n    private get dotsToDisplay() {\n        return this.dotsToDisplayField\n    }\n\n    private get numberOfClusters() {\n        return this.numberOfClustersField\n    }\n\n    private set numberOfClusters(newValue: number) {\n        this.numberOfClustersField = newValue\n    }\n\n    private static areDotsNearby(firstDot: Dot, secondDot: Dot): boolean {\n        let centersDiff = Math.sqrt(Math.pow(firstDot.xCoordinate - secondDot.xCoordinate, 2)) +\n            Math.sqrt(Math.pow(firstDot.yCoordinate - secondDot.yCoordinate, 2)) - 25\n\n        return centersDiff <= 25\n    }\n\n    private static updateCardSize(card: HTMLElement | null) {\n        if (card) {\n            card.style.height = card.clientWidth + `px`\n        }\n    }\n\n    private canvasClickListener = (event: MouseEvent) => {\n        let canvasRect = (event.target as Element).getBoundingClientRect()\n\n        switch (this.clusteringDisplayState) {\n            case ClusteringDisplayState.DOTS_ADDING: {\n                if (canvasRect) {\n                    this.clearDots()\n\n                    let dotToAdd = new Dot(\n                        event.clientX - canvasRect.left,\n                        event.clientY - canvasRect.top\n                    )\n\n                    let isAbleToAddDot = true\n\n                    for (let i = 0; i < this.dotsToDisplay.length; i++) {\n                        let processingDot = this.dotsToDisplay[i]\n\n                        if (ClusteringView.areDotsNearby(dotToAdd, processingDot)) {\n                            isAbleToAddDot = false\n\n                            break\n                        }\n                    }\n\n                    if (isAbleToAddDot) {\n                        let dots = this.dotsToDisplay\n                        dots.push(dotToAdd)\n\n                        this.dotsToDisplay = dots\n                    }\n                }\n\n                break\n            }\n\n            case ClusteringDisplayState.DOTS_REMOVING: {\n                if (canvasRect) {\n                    this.clearDots()\n\n                    let clickDot = new Dot(\n                        event.clientX - canvasRect.left,\n                        event.clientY - canvasRect.top)\n\n                    for (let i = 0; i < this.dotsToDisplay.length; i++) {\n                        let processingDot = this.dotsToDisplay[i]\n\n                        if (ClusteringView.areDotsNearby(clickDot, processingDot)) {\n                            let dots = this.dotsToDisplay\n                            dots.splice(i, 1)\n\n                            this.dotsToDisplay = dots\n\n                            break\n                        }\n                    }\n                }\n\n                break\n            }\n        }\n    }\n\n    private initCanvasOnClickListener() {\n        this.canvas?.addEventListener('click', this.canvasClickListener)\n    }\n\n    private removeCanvasClickListener() {\n        this.canvas?.removeEventListener('click', this.canvasClickListener)\n    }\n\n    private initCanvas() {\n        this.canvas = document.getElementById(\"clusterCanvas\") as HTMLCanvasElement\n        this.canvasContext = this.canvas.getContext(\"2d\")\n\n        this.updateCanvasSize()\n    }\n\n    private initCardWidthListener() {\n        let card = document.getElementById(\"clusteringCard\")\n\n        ClusteringView.updateCardSize(card)\n        this.updateCanvasSize()\n\n        window?.addEventListener('resize', () => {\n            ClusteringView.updateCardSize(card)\n            this.updateCanvasSize()\n        })\n    }\n\n    private initAddDotButtonOnClickListener() {\n        let addDotButton = document.getElementById(\"addDotButton\")\n\n        addDotButton?.addEventListener('click', () => {\n            this.clusteringDisplayState = ClusteringDisplayState.DOTS_ADDING\n        })\n    }\n\n    private initRemoveDotButtonOnClickListener() {\n        let removeDotButton = document.getElementById(\"removeDotButton\")\n\n        removeDotButton?.addEventListener('click', () => {\n            this.clusteringDisplayState = ClusteringDisplayState.DOTS_REMOVING\n        })\n    }\n\n    private initKMeansButtonOnClickListener() {\n        let kMeansButton = document.getElementById(\"kMeansButton\")\n\n        kMeansButton?.addEventListener('click', () => {\n            if (this.numberOfClusters <= this.dotsToDisplay.length) {\n                this.isErrorDisplaying = false\n\n                this.clearDots()\n\n                this.clusteringDisplayState = null\n\n                this.dotsToDisplay = KMeansClusteringRepository\n                    .getInstance()\n                    .splitByClusters(this.dotsToDisplay, this.numberOfClusters)\n            } else {\n                this.isErrorDisplaying = true\n            }\n        })\n    }\n\n    private initHierarchyButtonOnClickListener() {\n        let hierarchyButton = document.getElementById(\"hierarchyButton\")\n\n        hierarchyButton?.addEventListener('click', () => {\n            if (this.numberOfClusters <= this.dotsToDisplay.length) {\n                this.isErrorDisplaying = false\n\n                this.clearDots()\n\n                this.clusteringDisplayState = null\n\n                this.dotsToDisplay = HierarchyClusteringRepository\n                    .getInstance()\n                    .splitByClusters(this.dotsToDisplay, this.numberOfClusters)\n            } else {\n                this.isErrorDisplaying = true\n            }\n        })\n    }\n\n    private initComparisonButtonOnClickListener() {\n        let comparisonButton = document.getElementById(\"comparisonButton\")\n\n        comparisonButton?.addEventListener('click', () => {\n            if (this.numberOfClusters <= this.dotsToDisplay.length) {\n                this.isErrorDisplaying = false\n\n                this.clearDots()\n\n                this.clusteringDisplayState = null\n\n                this.dotsToDisplay = HierarchyClusteringRepository\n                    .getInstance()\n                    .splitByClusters(this.dotsToDisplay, this.numberOfClusters)\n\n                this.dotsToDisplay = KMeansClusteringRepository\n                    .getInstance()\n                    .splitByClusters(this.dotsToDisplay, this.numberOfClusters)\n            } else {\n                this.isErrorDisplaying = true\n            }\n        })\n    }\n\n    private initContainerWidthListener() {\n        new ResizeObserver(() => this.updateCanvasSize()).observe(document.getElementById(\"container\")!)\n    }\n\n    private initColorsArrays() {\n        this.kMeansColorsArray = [\"#ADA8F1\", \"#474555\", \"#ACA9BB\", \"#F69591\", \"#BB615F\", \"#574240\", \"#BFA5A3\", \"#71823B\", \"#3F510A\", \"#E5DBCE\"]\n        this.hierarchyColorsArray = [\"#514438\", \"#ED992A\", \"#0090B4\", \"#B8A89A\", \"#00C77F\", \"#00ABBB\", \"#00C77F\", \"#00C9DD\", \"#BEFCFF\", \"#458084\"]\n    }\n\n    private updateCanvasSize() {\n        let clusteringCard = document.getElementById(\"clusteringCard\")\n\n        if (clusteringCard) {\n            if (this.canvas) {\n                let clusteringCardOffsetWidth = clusteringCard!.offsetWidth - 30\n                let clusteringCardOffsetHeight = clusteringCard!.offsetHeight - 40\n\n                this.canvas.width = clusteringCardOffsetWidth\n                this.canvas.height = clusteringCardOffsetHeight\n\n                this.canvas.style.width = clusteringCardOffsetWidth + \"px\"\n                this.canvas.style.height = clusteringCardOffsetHeight + \"px\"\n            }\n        }\n        this.drawDots()\n    }\n\n    private drawDots() {\n        if (this.canvas) {\n            this.canvasContext?.clearRect(0, 0, this.canvas.width, this.canvas.height)\n            this.canvasContext?.beginPath()\n            this.canvasContext?.closePath()\n        }\n\n        this.dotsToDisplay.forEach((dot) => {\n            if (this.canvasContext) {\n                this.canvasContext.moveTo(dot.xCoordinate, dot.yCoordinate)\n\n                this.canvasContext.beginPath()\n\n                this.canvasContext.lineWidth = 20\n\n                if (dot.hierarchyIndex != null && dot.kMeansIndex != null) {\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, -Math.PI / 2, Math.PI / 2)\n\n                    if (this.hierarchyColorsArray) {\n                        this.canvasContext.strokeStyle = this.hierarchyColorsArray[dot.hierarchyIndex]\n\n                        this.canvasContext.stroke()\n                    }\n\n                    this.canvasContext.beginPath()\n\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, Math.PI / 2, -Math.PI / 2)\n\n                    if (this.kMeansColorsArray) {\n                        this.canvasContext.strokeStyle = this.kMeansColorsArray[dot.kMeansIndex]\n\n                        this.canvasContext.stroke()\n                    }\n                }\n\n                if (dot.hierarchyIndex != null && dot.kMeansIndex == null) {\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, 0, 2 * Math.PI)\n\n                    if (this.hierarchyColorsArray) {\n                        this.canvasContext.strokeStyle = this.hierarchyColorsArray[dot.hierarchyIndex]\n                    }\n\n                    this.canvasContext.stroke()\n                }\n\n                if (dot.kMeansIndex != null && dot.hierarchyIndex == null) {\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, 0, 2 * Math.PI)\n\n                    if (this.kMeansColorsArray) {\n                        this.canvasContext.strokeStyle = this.kMeansColorsArray[dot.kMeansIndex]\n                    }\n\n                    this.canvasContext.stroke()\n                }\n\n                if (dot.kMeansIndex == null && dot.hierarchyIndex == null) {\n                    this.canvasContext.arc(dot.xCoordinate, dot.yCoordinate, 10, 0, 2 * Math.PI)\n\n                    this.canvasContext.strokeStyle = \"#000000\"\n\n                    this.canvasContext.stroke()\n                }\n            }\n        })\n    }\n\n    private clearDots() {\n        for (let i = 0; i < this.dotsToDisplay.length; i++) {\n            this.dotsToDisplay[i].hierarchyIndex = null\n            this.dotsToDisplay[i].kMeansIndex = null\n        }\n    }\n\n    mounted() {\n        this.initContainerWidthListener()\n        this.initColorsArrays()\n        this.initCanvas()\n        this.initCardWidthListener()\n        this.initAddDotButtonOnClickListener()\n        this.initRemoveDotButtonOnClickListener()\n        this.initKMeansButtonOnClickListener()\n        this.initHierarchyButtonOnClickListener()\n        this.initComparisonButtonOnClickListener()\n        this.initCanvasOnClickListener()\n    }\n}\n","import { render } from \"./ClusteringView.vue?vue&type=template&id=37793bbf&scoped=true&ts=true\"\nimport script from \"./ClusteringView.vue?vue&type=script&lang=ts\"\nexport * from \"./ClusteringView.vue?vue&type=script&lang=ts\"\n\nimport \"./ClusteringView.vue?vue&type=style&index=0&id=37793bbf&scoped=true&lang=css\"\n\nimport exportComponent from \"/Users/delet-dis/Documents/projects/Frontend/interesting-algorithms/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-37793bbf\"]])\n\nexport default __exports__"],"names":["_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","class","id","_hoisted_2","_hoisted_3","_hoisted_4","_createElementVNode","_hoisted_5","_hoisted_6","_hoisted_7","ref","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","render","_ctx","_cache","$props","$setup","$data","$options","_component_ClusteringDescription","_resolveComponent","_component_Card","_component_Error","_component_vue_slider","_openBlock","_createElementBlock","_createVNode","default","_withCtx","_","_normalizeClass","isErrorDisplaying","modelValue","numberOfClusters","$event","dotSize","max","min","silent","_Fragment","ClusteringDescription","Vue","Options","components","__exports__","Dot","xCoordinate","yCoordinate","kMeansIndex","hierarchyIndex","Cluster","sumX","sumY","this","dots","forEach","dot","lastX","currentX","lastY","currentY","length","KMeansClusteringRepository","k","allDots","size","step","iterator","j","clusters","Math","floor","clustersNumber","i","minimalDistance","Number","MAX_VALUE","arrayPos","currentDistance","sqrt","pow","push","identifyCenters","numberOfClustersToCheck","bind","setCenter","p","instance","ClusteringDisplayState","ListNode","data","prevNode","nextNode","Symbol","LinkedList","args","pushBack","element","backNode","frontNode","iteratorStartNode","node","notRemoved","anotherList","currentNode","next","val","done","value","points","closest","distCol","HierarchyClusteringRepository","distances","Array","bestCluster","globalMin","firstCluster","secondCluster","distance","concatenate","prevBest","bestClusterIndexInDistancesTable","closestToBestClusterIndex","remove","cluster","currentCluster","newDistance","clusterNumber","ClusteringView","setup","useMeta","title","htmlAttrs","lang","amp","event","canvasRect","target","getBoundingClientRect","clusteringDisplayState","clearDots","dotToAdd","clientX","left","clientY","top","isAbleToAddDot","dotsToDisplay","processingDot","ClusteringView_1","areDotsNearby","clickDot","splice","dotsToDisplayField","newValue","drawDots","numberOfClustersField","canvas","addEventListener","canvasClickListener","removeEventListener","document","getElementById","canvasContext","getContext","updateCanvasSize","card","updateCardSize","window","addDotButton","removeDotButton","kMeansButton","splitByClusters","hierarchyButton","comparisonButton","ResizeObserver","observe","kMeansColorsArray","hierarchyColorsArray","clusteringCard","clusteringCardOffsetWidth","offsetWidth","clusteringCardOffsetHeight","offsetHeight","width","height","style","clearRect","beginPath","closePath","moveTo","lineWidth","arc","PI","strokeStyle","stroke","initContainerWidthListener","initColorsArrays","initCanvas","initCardWidthListener","initAddDotButtonOnClickListener","initRemoveDotButtonOnClickListener","initKMeansButtonOnClickListener","initHierarchyButtonOnClickListener","initComparisonButtonOnClickListener","initCanvasOnClickListener","firstDot","secondDot","centersDiff","clientWidth","Error","Card","VueSlider"],"sourceRoot":""}